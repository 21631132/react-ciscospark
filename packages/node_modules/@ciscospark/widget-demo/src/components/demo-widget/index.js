/* global ciscospark */
import React, {Component} from 'react';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {instanceOf} from 'prop-types';
import {autobind} from 'core-decorators';

import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import {RadioButtonGroup, RadioButton} from 'material-ui/RadioButton';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';

import TokenInput from '../token-input';

import styles from './styles.css';

const MODE_ONE_ON_ONE = 'MODE_ONE_ON_ONE';
const MODE_SPACE = 'MODE_SPACE';

const spaceWidgetElementId = 'my-ciscospark-space-widget';
const recentsWidgetElementId = 'my-ciscospark-recents-widget';

class DemoWidget extends Component {
  constructor(props) {
    super(props);
    const {cookies} = this.props;
    const toPersonEmail = cookies.get('toPersonEmail') || '';
    const spaceId = cookies.get('spaceId') || '';
    let mode;
    if (spaceId) {
      mode = MODE_SPACE;
    }
    else if (toPersonEmail) {
      mode = MODE_ONE_ON_ONE;
    }
    this.state = {
      accessToken: cookies.get('accessToken') || '',
      mode,
      spaceRunning: false,
      toPersonEmail,
      spaceId
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleOpenSpaceWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    if (this.state.mode === MODE_ONE_ON_ONE) {
      cookies.set('toPersonEmail', this.state.toPersonEmail);
    }
    else {
      cookies.set('spaceId', this.state.spaceId);
    }
    const toPerson = this.state.mode === MODE_ONE_ON_ONE ? this.state.toPersonEmail : '';
    const toSpace = this.state.mode === MODE_SPACE ? this.state.spaceId : '';
    this.openSpaceWidget({toPerson, toSpace});
  }

  @autobind
  handleOpenRecentsWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    const widgetEl = document.getElementById(recentsWidgetElementId);
    ciscospark.widget(widgetEl).recentsWidget({
      accessToken: this.state.accessToken,
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
        if (eventName === 'rooms:selected') {
          const spaceId = detail.data.id;
          if (this.state.spaceRunning) {
            this.handleRemove();
          }
          this.openSpaceWidget({toSpace: spaceId});
        }
      }
    });
    this.setState({recentsRunning: true});
  }

  @autobind
  handleRemove() {
    const widgetEl = document.getElementById(spaceWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({spaceRunning: false});
  }

  @autobind
  handleRecentsRemove() {
    const widgetEl = document.getElementById(recentsWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({recentsRunning: false});
  }

  @autobind
  handleAccessTokenChange(accessToken) {
    return this.setState({accessToken});
  }

  @autobind
  handleEmailChange(e) {
    return this.setState({toPersonEmail: e.target.value});
  }

  @autobind
  handleModeChange(e, value) {
    return this.setState({mode: value});
  }

  @autobind
  handleSpaceChange(e) {
    return this.setState({spaceId: e.target.value});
  }

  @autobind
  openSpaceWidget({toPerson, toSpace}) {
    const widgetEl = document.getElementById(spaceWidgetElementId);
    const widgetOptions = {
      accessToken: this.state.accessToken,
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      }
    };
    if (toPerson) {
      widgetOptions.toPersonEmail = toPerson;
    }
    if (toSpace) {
      widgetOptions.spaceId = toSpace;
    }
    ciscospark.widget(widgetEl).spaceWidget(widgetOptions);
    this.setState({spaceRunning: true});
  }

  render() {
    const hasToPerson = this.state.mode === MODE_ONE_ON_ONE && this.state.toPersonEmail;
    const hasToSpace = this.state.mode === MODE_SPACE && this.state.spaceId;
    const loadButtonEnabled = this.state.accessToken && (hasToPerson || hasToSpace) && !this.state.spaceRunning;
    const loadRecentsButtonEnabled = this.state.accessToken && !this.state.recentsRunning;
    const componentSpaceContainerClassNames = [
      styles.widgetSpaceComponentContainer
    ];
    if (!this.state.spaceRunning) {
      componentSpaceContainerClassNames.push(styles.hidden);
    }
    const componentRecentsContainerClassNames = [
      styles.widgetRecentsComponentContainer
    ];
    if (!this.state.recentsRunning) {
      componentRecentsContainerClassNames.push(styles.hidden);
    }
    const runningDemosContainerClassNames = [
      styles.runningDemosContainer
    ];
    if (!this.state.spaceRunning && !this.state.recentsRunning) {
      runningDemosContainerClassNames.push(styles.hidden);
    }

    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <AppBar title="Cisco Spark Widget" />
        <div className={classNames('ciscospark-demo-wrapper', styles.demoWrapper)}>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="The Cisco Spark widgets allow developers to easily incorporate Cisco Spark Widgets into an application."
              title="Cisco Spark Widget Demo"
            />
            <CardText expandable>
              Our widgets are built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/ciscospark/spark-js-sdk">Spark Javascript SDK </a>.
            </CardText>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Cisco Spark Space Widget can open to a space or person."
              title="Cisco Spark Space Widget"
            />
            <CardText expandable>
              <div className={classNames(styles.select)}>
                <RadioButtonGroup
                  aria-label="Widget 'To' Type"
                  name="toType"
                  onChange={this.handleModeChange}
                  valueSelected={this.state.mode}
                >
                  <RadioButton
                    aria-label="To Space"
                    label="To Space"
                    value={MODE_SPACE}
                  />
                  <RadioButton
                    aria-label="To Person"
                    label="To Person"
                    value={MODE_ONE_ON_ONE}
                  />
                </RadioButtonGroup>
              </div>
              {
                this.state.mode === MODE_SPACE &&
                <div>
                  <input
                    aria-label="To Space ID"
                    className={styles.textInput}
                    id="toSpaceId"
                    onChange={this.handleSpaceChange}
                    placeholder="Spark Space Id"
                    value={this.state.spaceId}
                  />
                </div>
              }
              {
                this.state.mode === MODE_ONE_ON_ONE &&
                <div>
                  <input
                    aria-label="To User Email"
                    className={styles.textInput}
                    id="toUserEmail"
                    onChange={this.handleEmailChange}
                    placeholder="Spark User Email (For 1:1)"
                    value={this.state.toPersonEmail}
                  />
                </div>
              }
            </CardText>
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Widget"
                disabled={!loadButtonEnabled}
                id="openWidgetButton"
                label="Open Space Widget"
                onClick={this.handleOpenSpaceWidget}
                primary
              />
              <RaisedButton
                aria-label="Remove Widget"
                disabled={!this.state.spaceRunning}
                id="removeWidgetButton"
                label="Remove Space Widget"
                onClick={this.handleRemove}
                primary
              />
            </CardActions>
          </Card>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              title="Cisco Spark Recents Widget Demo"
            />
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Recents Widget"
                disabled={!loadRecentsButtonEnabled}
                label="Open Recents Widget"
                onClick={this.handleOpenRecentsWidget}
                primary
              />
              <RaisedButton
                aria-label="Remove Recents Widget"
                disabled={!this.state.recentsRunning}
                id="removeRecentsWidgetButton"
                label="Remove Recents Widget"
                onClick={this.handleRecentsRemove}
                primary
              />
            </CardActions>
          </Card>
          <div className={classNames(runningDemosContainerClassNames)}>
            <div className={classNames(componentSpaceContainerClassNames)}>
              <div id={spaceWidgetElementId} />
            </div>
            <div className={classNames(componentRecentsContainerClassNames)}>
              <div id={recentsWidgetElementId} />
            </div>
          </div>
        </div>
      </div>
    );
  }
}

DemoWidget.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidget.title = 'Widget Demo';
DemoWidget.path = '/widget-demo';

export default withCookies(DemoWidget);
