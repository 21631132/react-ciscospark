import {fromJS} from 'immutable';

import {
  STORE_SPACE,
  UPDATE_SPACES_STATUS,
  UPDATE_SPACE_WITH_ACTIVITY,
  UPDATE_SPACE_READ,
  REMOVE_SPACE,
  STORE_SPACES
} from './actions';

export const initialState = fromJS({
  items: {},
  status: {
    isDecrypting: false,
    isFetching: false,
    hasFetched: false
  }
});


export default function reducer(state = initialState, action) { // eslint-disable-line complexity
  switch (action.type) {
    case UPDATE_SPACES_STATUS:
      return state.mergeDeepIn(['status'], action.payload.status);

    case STORE_SPACES: {
      return state.setIn(['status', 'hasFetched'], true)
        .mergeDeepIn(['items'], action.payload.spaces);
    }

    case UPDATE_SPACE_WITH_ACTIVITY: {
      const {space} = action.payload;
      if (state.hasIn(['items', space.id])) {
        return state.mergeDeepIn(['items', space.id], space);
      }
      return state;
    }

    case UPDATE_SPACE_READ: {
      const {lastSeenDate, spaceId} = action.payload;
      return state.setIn(['items', spaceId, 'lastSeenActivityDate'], lastSeenDate);
    }

    case STORE_SPACE: {
      const {space} = action.payload;
      return state.mergeDeepIn(['items', space.id], space);
    }

    case REMOVE_SPACE:
      return state.deleteIn(['items', action.payload.id]);

    default:
      return state;
  }
}
