import moment from 'moment';
import {fromJS, OrderedMap} from 'immutable';

export const initialState = fromJS({
  items: new OrderedMap(),
  status: {
    isFetching: false,
    hasFetched: false
  }
});

import {
  ADD_SPACE,
  ACKNOWLEDGE_SPACE,
  UPDATE_SPACES_STATUS,
  UPDATE_SPACE_WITH_ACTIVITY,
  REMOVE_SPACE,
  STORE_SPACES
} from './actions';

function sortByNewest(space) {
  return -moment(space.get(`lastReadableActivityDate`)).format(`x`);
}

export default function reducer(state = initialState, action) {

  state = activityReducer(state, action);

  switch (action.type) {
  case UPDATE_SPACES_STATUS:
    return state.mergeDeepIn([`status`], action.payload.status);

  case STORE_SPACES: {
    const spaces = new OrderedMap(action.payload.spaces.map((s) => [s.id, fromJS(s)]));
    return state.setIn([`status`, `isFetching`], false)
      .setIn([`status`, `hasFetched`], true)
      .set(`items`, spaces.sortBy(sortByNewest));
  }

  case ADD_SPACE: {
    const spaces = state.get(`items`).set(action.payload.space.id, action.payload.space)
      .sortBy(sortByNewest);
    return state.set(`items`, spaces);
  }

  case REMOVE_SPACE:
    return state.deleteIn([`items`, action.payload.id]);

  default:
    return state;
  }
}

function activityReducer(state, action) {
  switch (action.type) {
  case ACKNOWLEDGE_SPACE:
  case UPDATE_SPACE_WITH_ACTIVITY: {
    const space = action.payload.space;
    let spaces = state.get(`items`);
    if (state.getIn([`items`, space.id])) {
      spaces = spaces.mergeDeepIn([space.id], space);
    }
    return state.set(`items`, spaces.sortBy(sortByNewest));
  }
  default:
    return state;
  }
}
