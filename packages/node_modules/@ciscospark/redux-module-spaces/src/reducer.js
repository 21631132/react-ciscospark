import {fromJS, Record} from 'immutable';

import {
  UPDATE_SPACE_WITH_ACTIVITY,
  UPDATE_SPACE_READ,
  REMOVE_SPACE,
  STORE_SPACES
} from './actions';

const Status = Record({
  isDecrypting: false,
  isLocked: false,
  isHidden: false
});

const Space = Record({
  latestActivity: null,
  avatar: '',
  displayName: '',
  id: null,
  url: '',
  activities: [],
  lastReadableActivityDate: '',
  lastSeenActivityDate: '',
  lastActivityTimestamp: '',
  conversationWebUrl: '',
  participants: [],
  type: '',
  published: '',
  tags: [],
  team: null,
  status: new Status()
});

export const initialState = fromJS({
  byId: {}
});


export default function reducer(state = initialState, action) {
  switch (action.type) {
    case STORE_SPACES: {
      const spaces = {};
      action.payload.spaces.forEach((s) => {
        spaces[s.id] = new Space(s);
      });
      return state.mergeDeepIn(['byId'], spaces);
    }

    case UPDATE_SPACE_WITH_ACTIVITY: {
      const {space} = action.payload;
      if (state.hasIn(['byId', space.id])) {
        return state.mergeDeepIn(['byId', space.id], space);
      }
      return state;
    }

    case UPDATE_SPACE_READ: {
      const {lastSeenDate, spaceId} = action.payload;
      return state.setIn(['byId', spaceId, 'lastSeenActivityDate'], lastSeenDate);
    }

    case REMOVE_SPACE:
      return state.deleteIn(['byId', action.payload.id]);

    default:
      return state;
  }
}
