import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';

import {fetchCurrentUser, fetchToUser} from '@ciscospark/redux-module-user';
import {injectSpark} from '@ciscospark/react-redux-spark';
import TitleBar from '@ciscospark/react-component-title-bar';
import Notifications from '@ciscospark/react-container-notifications';
import ActivityMenu from '@ciscospark/react-component-activity-menu';
import {MessageWidget} from '@ciscospark/widget-message';


import {toggleActivityMenu} from './actions';
import styles from './styles.css';

/**
 * MessageMeetWidget Component
 */
export class MessageMeetWidget extends Component {

  constructor(props) {
    super(props);
    this.handleMenuClick = this.handleMenuClick.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    const {
      user,
      spark,
      toPersonEmail,
      toPersonId
    } = nextProps;

    const {
      authenticated,
      connected,
      registered
    } = nextProps.sparkState;

    if (spark && connected && authenticated && registered) {
      if (!user.get(`currentUser`) && !user.getIn([`status`, `isFetchingCurrentUser`])) {
        nextProps.fetchCurrentUser(spark);
      }
      if (!user.get(`toUser`) && !user.getIn([`status`, `isFetchingToUser`])) {
        nextProps.fetchToUser({toPersonEmail, toPersonId}, spark);
      }
    }
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;

    return nextProps.sparkState.connected !== props.sparkState.connected
      || nextProps.user !== props.user
      || nextProps.conversation !== props.conversation
      || nextProps.avatar !== props.avatar
      || nextProps.indicators !== props.indicators
      || nextProps.widgetMessageMeet !== props.widgetMessageMeet;
  }

  handleMenuClick() {
    const props = this.props;
    props.toggleActivityMenu();
  }

  /**
   * Render
   *
   * @returns {Object}
   */
  render() {
    const props = this.props;
    const {
      avatar,
      spark,
      sparkState,
      user,
      widgetMessageMeet
    } = props;
    const {
      toPersonEmail,
      toPersonId
    } = this.props;

    const toUser = user.get(`toUser`);
    const showActivityMenu = widgetMessageMeet.get(`showActivityMenu`);

    return (
      <div className={classNames(`widget-message-meet`, styles.widgetMessageMeet)}>
        <div className={classNames(`banner`, styles.banner)} />
        <div className={classNames(`widget-message-meet-inner`, styles.widgetMessageMeetInner)}>
          <div className={classNames(`activity-menu-wrapper`, styles.activityMenuWrapper)}>
            {
              showActivityMenu &&
              <ActivityMenu onExit={this.handleMenuClick} />
            }
          </div>
          <div className={classNames(`title-bar-wrapper`, styles.titleBarWrapper)}>
            {
              toUser &&
              <TitleBar
                connectionStatus={sparkState}
                image={avatar[toUser.id]}
                name={toUser.displayName}
                onMenuClick={this.handleMenuClick}
              />
            }
          </div>
          <MessageWidget
            spark={spark}
            toPersonEmail={toPersonEmail}
            toPersonId={toPersonId}
            user={user}
          />
        </div>
        <Notifications />
      </div>
    );
  }
}

MessageMeetWidget.propTypes = {
  initialActivity: PropTypes.string, // eslint-disable-line react/no-unused-prop-types
  startCall: PropTypes.bool, // eslint-disable-line react/no-unused-prop-types
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string
};

function mapStateToProps(state) {
  return {
    avatar: state.avatar,
    spark: state.spark.get(`spark`),
    sparkState: state.spark.get(`status`).toJS(),
    user: state.user,
    indicators: state.indicators,
    widgetMessageMeet: state.widgetMessageMeet
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    fetchCurrentUser,
    fetchToUser,
    toggleActivityMenu
  }, dispatch)
)(injectSpark(MessageMeetWidget));
