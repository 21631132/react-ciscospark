import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';


import {fetchCurrentUser} from '@ciscospark/redux-module-user';

import {injectSpark} from '@ciscospark/react-redux-spark';
import TitleBar from '@ciscospark/react-component-title-bar';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import Notifications from '@ciscospark/react-container-notifications';
import WidgetMessage from '@ciscospark/widget-message';

import styles from './styles.css';


/**
 * MessageMeetWidget Component
 */
export class MessageMeetWidget extends Component {

  componentWillReceiveProps(nextProps) {
    const {
      user,
      spark
    } = nextProps;

    const {
      authenticated,
      connected,
      registered
    } = nextProps.sparkState;

    if (spark && connected && authenticated && registered) {
      if (!user.get(`currentUser`).id && !user.getIn([`status`, `isFetchingCurrentUser`])) {
        nextProps.fetchCurrentUser(spark);
      }
    }
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;

    return nextProps.sparkState.connected !== props.sparkState.connected
      || nextProps.user !== props.user;
  }

  /**
   * Gets the non-current user of a conversation
   *
   * @param {object} conversation
   * @returns {object}
   */
  getUserFromConversation(conversation) {
    if (!conversation.participants) {
      return null;
    }
    const props = this.props;
    return conversation.participants.find((user) =>
      user.id !== props.user.get(`currentUser`).id
    );
  }

  /**
   * Render
   *
   * @returns {Object}
   */
  render() {
    const props = this.props;
    const {
      avatar,
      conversation,
      spark,
      sparkState,
      user
    } = props;
    const {
      toPersonEmail,
      toPersonId
    } = this.props;

    return (
      <div className={classNames(`widget-message-meet`, styles.widgetMessageMeet)}>
        <div className={classNames(`banner`, styles.banner)} />
        {
          (() => {
            if (user && user.has(`currentUser`)) {
              const toUser = this.getUserFromConversation(conversation);
              return (
                <div className={classNames(`widget-message-meet-inner`, styles.widgetMessageMeetInner)}>
                  <div className={classNames(`title-bar-wrapper`, styles.titleBarWrapper)}>
                    {
                      toUser &&
                      <TitleBar
                        connectionStatus={sparkState}
                        image={avatar[toUser.id]}
                        name={toUser.displayName}
                      />
                    }
                  </div>
                  <WidgetMessage
                    spark={spark}
                    toPersonEmail={toPersonEmail}
                    toPersonId={toPersonId}
                  />
                </div>
              );
            }
            return <LoadingScreen />;
          })()
        }
        <Notifications />
      </div>
    );
  }
}

MessageMeetWidget.propTypes = {
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string
};

function mapStateToProps(state) {
  return {
    avatar: state.avatar,
    spark: state.spark.get(`spark`),
    sparkState: state.spark.get(`status`).toJS(),
    user: state.user,
    conversation: state.conversation,
    indicators: state.indicators
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    fetchCurrentUser
  }, dispatch)
)(injectSpark(MessageMeetWidget));
