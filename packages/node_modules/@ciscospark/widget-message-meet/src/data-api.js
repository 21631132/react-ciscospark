import React from 'react';
import ReactDOM from 'react-dom';

import Root from './root';

import '@ciscospark/react-component-spark-fonts';
import './styles/main.css';

export function initMessageMeetWidget(element, {accessToken, callback, initialActivity, startCall, toPersonEmail, toPersonId}) {
  function handleEvent(name, data) {
    const detail = {
      resource: name.split(`:`)[0],
      event: name.split(`:`)[1],
      actorId: data.actor.id,
      data
    };

    const event = new CustomEvent(name, {
      detail
    });
    element.dispatchEvent(event);
    if (callback) {
      return callback(name, data);
    }
    return event;
  }

  ReactDOM.render(
    <Root
      accessToken={accessToken}
      initialActivity={initialActivity}
      onEvent={handleEvent}
      startCall={startCall}
      toPersonEmail={toPersonEmail}
      toPersonId={toPersonId}
    />,
    element
  );
  return element;
}

export default function loadAllWidgets() {
  const widgets = document.querySelectorAll(`[data-toggle="spark-message-meet"]`);
  for (const widget of widgets) {
    initMessageMeetWidget(widget, {
      accessToken: widget.getAttribute(`data-access-token`) || undefined,
      initialActivity: widget.getAttribute(`data-intial-activity`) || undefined,
      startCall: widget.getAttribute(`data-start-call`) || undefined,
      toPersonEmail: widget.getAttribute(`data-to-person-email`) || undefined,
      toPersonId: widget.getAttribute(`data-to-person-id`) || undefined
    });
  }
}

if (module.hot) {
  module.hot.accept();
}

document.addEventListener(`DOMContentLoaded`, loadAllWidgets, false);

// Inject widget into browser globals
if (!window.ciscospark) {
  window.ciscospark = {};
}
window.ciscospark.MessageMeetWidget = {
  init: initMessageMeetWidget
};
