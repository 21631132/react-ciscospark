/* eslint-disable import/prefer-default-export */
import {
  constructMessagesEventData,
  constructRoomsEventData
} from './events';


/**
 * Processes a mercury event "event:conversation.activity"
 * @param {object} event
 * @param {object} eventNames
 * @param {string} currentUserId
 * @param {string} space
 * @param {object} actions
 * @param {function} actions.handleEvent
 * @param {function} actions.removeInflightActivity
 * @param {function} actions.updateHasNewMessage
 * @returns {null}
 */
export function handleConversationActivityEvent(event, eventNames, currentUserId, space, actions) {
  const {activity} = event.data;
  const toUser = space.toPerson;
  const isSelf = activity.actor.id === currentUserId;
  // Ignore activity from other conversations
  if (activity.target && activity.target.id === space.id) {
    if (activity.object.objectType === 'activity' && isSelf && activity.verb === 'acknowledge') {
      actions.handleEvent(eventNames.SPACES_READ, constructRoomsEventData(space, activity));
    }
    else {
      actions.removeInflightActivity(activity.clientTempId);
      // Emit message:created event
      actions.handleEvent(eventNames.MESSAGES_CREATED, constructMessagesEventData(activity, toUser));
      // Do not emit unread if current user created the message
      if (!isSelf) {
        actions.updateHasNewMessage(true);
        actions.handleEvent(eventNames.SPACES_UNREAD, constructRoomsEventData(space, activity));
      }
    }
  }
}
