/* eslint-disable react/no-set-state */
import React, {Component} from 'react';
import classNames from 'classnames';
import cookie from 'react-cookie';
import autobind from 'autobind-decorator';

import TextField from 'material-ui/TextField';
import {Tabs, Tab} from 'material-ui/Tabs';
import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import Toggle from 'material-ui/Toggle';

import Highlight from 'react-highlight';
import 'highlight.js/styles/default.css';

import SparkLogo from '@ciscospark/react-component-spark-logo';
import WidgetSpace from '@ciscospark/widget-space';

import TokenInput from '../token-input';

import styles from './styles.css';


class DemoWidgetSpace extends Component {
  constructor(props) {
    super(props);
    const hasToken = !!cookie.load(`accessToken`);
    this.state = {
      authenticate: false,
      displayToken: false,
      hasToken,
      accessToken: cookie.load(`accessToken`) || ``,
      toPersonEmail: cookie.load(`toPersonEmail`) || ``,
      spaceId: cookie.load(`spaceId`) || ``,
      running: false
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    cookie.save(`accessToken`, this.state.accessToken);
    cookie.save(`spaceId`, this.state.spaceId);
    cookie.save(`toPersonEmail`, this.state.toPersonEmail);
    this.setState({running: true});
  }

  @autobind
  handleAccessTokenChange(accessToken) {
    return this.setState({accessToken, hasToken: !!accessToken});
  }

  @autobind
  handleDisplayAccessTokenChange(e, displayToken) {
    return this.setState({displayToken});
  }

  @autobind
  handleEmailChange(e) {
    return this.setState({toPersonEmail: e.target.value});
  }

  @autobind
  handleModeChange(e) {
    return this.setState({mode: e.target.value});
  }

  @autobind
  handleSpaceChange(e) {
    return this.setState({spaceId: e.target.value});
  }

  @autobind
  handleClearToken() {
    return this.setState({hasToken: false}, () => cookie.remove(`accessToken`));
  }

  createWidget(e) {
    e.preventDefault();
    return this.setState({running: true});
  }

  generateExampleCode(state) {
    const {accessToken, displayToken, spaceId, toPersonEmail} = state;
    const displayedAccessToken = displayToken ? accessToken : `YOUR_ACCESS_TOKEN`;
    let inlineToField, reactToField;
    if (spaceId) {
      inlineToField = `data-space-id="${spaceId}"`;
      reactToField = `spaceId="${spaceId}`;
    }
    else if (toPersonEmail) {
      inlineToField = `data-to-person-email="${toPersonEmail}"`;
      reactToField = `toPersonEmail="${toPersonEmail}"`;
    }
    else {
      inlineToField = `data-space-id="SPACE_ID"`;
      reactToField = `spaceId="SPACE_ID"`;
    }
    const reactCode = `import SpaceWidget from '@ciscospark/widget-space';

<SpaceWidget accessToken="${displayedAccessToken}" ${reactToField} />`;
    const inlineCode = `<div data-toggle="ciscospark-space" data-access-token="${displayedAccessToken}" ${inlineToField} />`;
    return {
      inlineCode,
      reactCode
    };
  }

  render() {
    const loadButtonEnabled = this.state.accessToken && (this.state.toPersonEmail || this.state.spaceId) && !(this.state.toPersonEmail && this.state.spaceId);
    const {inlineCode, reactCode} = this.generateExampleCode(this.state);
    if (this.state.running) {
      return (
        <div>
          <AppBar title="Cisco Spark Space Widget" />
          <div className={classNames(`ciscospark-widget-component-container`, styles.widgetComponentContainer)}>
            <WidgetSpace
              accessToken={this.state.accessToken}
              spaceId={this.state.spaceId}
              toPersonEmail={this.state.toPersonEmail}
            />
          </div>
        </div>
      );
    }
    return (
      <div>
        <AppBar title="Cisco Spark Space Widget" />
        <div className={classNames(`ciscospark-demo-wrapper`, styles.demoWrapper)}>
          <div className={classNames(`ciscospark-logo`, styles.logo)}>
            <SparkLogo />
          </div>
          { !this.state.hasToken &&
            <TokenInput onLogin={this.handleAccessTokenChange} />
          }
          {
            this.state.hasToken &&
              <div className={classNames(styles.toForm)}>
                <div className={classNames(styles.header)}>
                  <div>
                    <TextField
                      floatingLabelFixed
                      floatingLabelText="To Room/Space Id"
                      hintText="Spark Space Id"
                      onChange={this.handleSpaceChange}
                      value={this.state.spaceId}
                    />
                  </div>
                  <div>
                    <TextField
                      floatingLabelFixed
                      floatingLabelText="To User Email"
                      hintText="Spark User Email (For 1:1)"
                      onChange={this.handleEmailChange}
                      value={this.state.toPersonEmail}
                    />
                  </div>
                  <div>
                    <RaisedButton
                      disabled={!loadButtonEnabled}
                      label={`Open Widget`}
                      onClick={this.handleSubmit}
                      primary
                    />
                    <RaisedButton
                      disabled={!this.state.accessToken}
                      label={`Clear Token`}
                      onClick={this.handleClearToken}
                      secondary
                    />
                  </div>
                </div>
                <div className={classNames(styles.example)}>
                  <Tabs>
                    <Tab label={`React Component`}>
                      <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                        <Highlight>
                          {reactCode}
                        </Highlight>
                      </div>
                    </Tab>
                    <Tab label={`Inline Mode`}>
                      <div className={classNames(`ciscospark-example-code`, styles.exampleCode)}>
                        <Highlight>
                          {inlineCode}
                        </Highlight>
                      </div>
                    </Tab>
                  </Tabs>
                  <div className={classNames(`ciscospark-toggle`, styles.toggle)}>
                    <div>
                      <Toggle
                        label="Display Access Token"
                        labelPosition="right"
                        onToggle={this.handleDisplayAccessTokenChange}
                      />
                    </div>
                  </div>
                </div>
              </div>
          }
        </div>
      </div>
    );
  }
}

DemoWidgetSpace.title = `Widget Space`;
DemoWidgetSpace.path = `/widget-space-demo`;

export default DemoWidgetSpace;
