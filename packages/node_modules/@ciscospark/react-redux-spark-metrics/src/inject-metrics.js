import React, {Component, PropTypes} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import autobind from 'autobind-decorator';

import {

} from './actions';

export default function injectSparkMetrics(WrappedComponent) {
  class InjectSparkMetrics extends Component {
    shouldComponentUpdate() {
      return true;
    }

    sendQueue() {

    }

    sendDuration() {}


    render() {
      const {

      } = this.props;
      const metrics = {

      };
      return <WrappedComponent {...this.props} metrics={metrics} />;
    }
  }

  const injectedProps = {
    sparkInstance: PropTypes.object,
    metricsStore: PropTypes.object
  };

  InjectSparkMetrics.propTypes = {
    startTime: PropTypes.string,
    ...injectedProps
  };

  InjectSparkMetrics.displayName = `InjectSparkMetrics(${getDisplayName(WrappedComponent)})`;
  InjectSparkMetrics.WrappedComponent = WrappedComponent;

  return connect(
    (state) => ({
      metricsStore: state.metricsStore,
      sparkInstance: state.spark.get(`spark`)
    }),
    (dispatch) => bindActionCreators({
      sendMetrics,
      storeMetric
    }, dispatch)
  )(InjectSparkMetrics);
}

function getDisplayName(C) {
  return C.displayName || C.name || `C`;
}
