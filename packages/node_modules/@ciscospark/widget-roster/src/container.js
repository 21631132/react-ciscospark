import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {autobind} from 'core-decorators';
import debounce from 'lodash/debounce';

import {fetchAvatarsForUsers} from '@ciscospark/redux-module-avatar';
import {searchForUser} from '@ciscospark/redux-module-search';

import LoadingScreen from '@ciscospark/react-component-loading-screen';


import {
  ICON_TYPE_ADD,
  default as Icon
} from '@ciscospark/react-component-icon';

import {getRosterWidgetProps} from './selector';
import {setSearchTerm, setWidgetViewAdd, setWidgetViewMain, VIEW_ADD} from './actions';
import messages from './messages';

import styles from './styles.css';

import ParticipantList from './components/participant-list';
import AddParticipant from './components/add-participant';
import ExternalParticipantMessage from './components/external-participant';
import RosterHeader from './components/roster-header';

/**
 * RosterWidget Container
 * @extends Component
 */
export class RosterWidget extends Component {
  constructor(props) {
    super(props);
    this.doSearch = debounce(this.doSearch, 1000);
  }

  shouldComponentUpdate(nextProps) {
    return nextProps.avatar.get(`items`) !== this.props.avatar.get(`items`) ||
      nextProps.conversation.get(`participants`) !== this.props.conversation.get(`participants`) ||
      nextProps.canEditRoster !== this.props.canEditRoster ||
      nextProps.currentView !== this.props.widgetRoster.currentView ||
      nextProps.searchResults !== this.props.searchResults;
  }

  componentWillUpdate(nextProps) {
    this.props.fetchAvatarsForUsers(nextProps.participants.map((user) => user.userId), this.props.sparkInstance);
    // Fetch avatars for searched users
    if (nextProps.searchResults && nextProps.searchResults !== this.props.searchResults && nextProps.searchResults.results) {
      this.props.fetchAvatarsForUsers(nextProps.searchResults.results.map((user) => user.id), this.props.sparkInstance);
    }
  }

  @autobind
  handleMenuClick() {
    this.props.onClickMenu();
  }

  @autobind
  handleCloseClick() {
    this.props.onClickClose();
  }

  @autobind
  handleAddPeople() {
    this.props.setWidgetViewAdd();
  }

  @autobind
  handleAddPeopleDismiss() {
    this.props.setWidgetViewMain();
  }

  @autobind
  handleAddPersonClick() {
    // TODO: Function
  }

  @autobind
  handleSearchInput(searchTerm) {
    this.props.setSearchTerm(searchTerm);
    if (searchTerm.length >= 3) {
      this.doSearch(searchTerm);
    }
  }

  @autobind
  doSearch(searchTerm) {
    // Only actually search if we don't have search results for the term
    if (searchTerm === this.props.searchTerm && !this.props.searchResults) {
      this.props.searchForUser(searchTerm, this.props.sparkInstance);
    }
  }

  /**
   * Renders the main area of the widget
   *
   * @returns {object}
   */
  render() {
    let mainArea;
    let participantsCount;
    const {formatMessage} = this.props.intl;
    // eslint-disable-next-line no-negated-condition
    if (!this.props.conversation.has(`participants`)) {
      mainArea = <LoadingScreen />;
    }
    else {
      const {
        canEditRoster,
        hasExternalParticipants,
        participantsCurrentUser,
        participantsModerators,
        participantsOther,
        searchResults,
        searchTerm,
        widgetRoster
      } = this.props;
      participantsCount = this.props.participants.length;
      let content;
      if (widgetRoster.getIn([`widgetState`, `currentView`]) === VIEW_ADD) {
        // eslint-disable-next-line no-extra-parens
        content = (
          <div>
            <AddParticipant
              noResultsMessage={formatMessage(messages.noResults)}
              onAddPerson={this.handleAddPersonClick}
              onChange={this.handleSearchInput}
              onDismiss={this.handleAddPeopleDismiss}
              placeholder={formatMessage(messages.addPlaceholder)}
              searchResults={searchResults}
              searchTerm={searchTerm}
            />
          </div>
        );
      }
      else {
        let addPeopleButton;
        if (canEditRoster) {
          // eslint-disable-next-line no-extra-parens
          addPeopleButton = (
            // eslint-disable-reason false positive until a11y plugin upgraded to ^5.0
            // eslint-disable-next-line jsx-a11y/no-static-element-interactions
            <div
              className={classNames(`ciscospark-roster-add-people`, styles.addPeople)}
              onClick={this.handleAddPeople}
              onKeyPress={this.handleAddPeople}
              role="button"
              tabIndex="0"
            >
              <div className={classNames(styles.addPeopleIcon)}>
                <Icon type={ICON_TYPE_ADD} />
              </div>
              <div>
                {formatMessage(messages.addPeople)}
              </div>
            </div>
          );
        }
        let moderators;
        if (participantsModerators && participantsModerators.length) {
          // eslint-disable-next-line no-extra-parens
          moderators = (
            <div>
              <div className={classNames(`ciscospark-roster-participants-separator`, styles.participantsSeparator)}>
                {formatMessage(messages.moderators)}
              </div>
              <div><ParticipantList participants={participantsModerators} /></div>
            </div>
          );
        }
        // eslint-disable-next-line no-extra-parens
        content = (
          <div>
            {
              addPeopleButton
            }
            <div>
              <ParticipantList participants={participantsCurrentUser} />
            </div>
            {
              moderators
            }
            <div className={classNames(`ciscospark-roster-participants-separator`, styles.participantsSeparator)}>
              {formatMessage(messages.participants)}
            </div>
            <div>
              <ParticipantList participants={participantsOther} />
            </div>
          </div>
        );
      }

      // eslint-disable-next-line no-extra-parens
      mainArea = (
        <div>
          {
            hasExternalParticipants && <ExternalParticipantMessage message={formatMessage(messages.externalParticipants)} />
          }
          {content}
        </div>
      );
    }
    return (
      <div className={classNames(`ciscospark-roster`, styles.roster)}>
        <RosterHeader
          onClose={this.handleCloseClick}
          onMenuClick={this.handleMenuClick}
          participantsCount={participantsCount}
        />
        <div className={classNames(`ciscospark-roster-scrolling-list`, styles.scrolling)} >
          {mainArea}
        </div>
      </div>
    );
  }
}

const injectedPropTypes = {
  canEditRoster: PropTypes.bool.isRequired,
  conversation: PropTypes.object.isRequired,
  currentView: PropTypes.string.isRequired,
  hasExternalParticipants: PropTypes.bool.isRequired,
  participants: PropTypes.array.isRequired,
  participantsCurrentUser: PropTypes.array.isRequired,
  participantsModerators: PropTypes.array,
  participantsOther: PropTypes.array.isRequired,
  searchResults: PropTypes.object,
  searchTerm: PropTypes.string,
  sparkInstance: PropTypes.object,
  user: PropTypes.object.isRequired,
  widgetRoster: PropTypes.object.isRequired,
  searchForUser: PropTypes.func.isRequired,
  setSearchTerm: PropTypes.func.isRequired,
  setWidgetViewAdd: PropTypes.func.isRequired,
  setWidgetViewMain: PropTypes.func.isRequired
};

export const ownPropTypes = {
  onClickClose: PropTypes.func,
  onClickMenu: PropTypes.func,
  onEvent: PropTypes.func,
  spaceId: PropTypes.string,
  eventNames: PropTypes.object
};

RosterWidget.propTypes = {
  ...ownPropTypes,
  ...injectedPropTypes
};

export default connect(
  getRosterWidgetProps,
  (dispatch) => bindActionCreators({
    fetchAvatarsForUsers,
    searchForUser,
    setSearchTerm,
    setWidgetViewAdd,
    setWidgetViewMain
  }, dispatch)
)(RosterWidget);
