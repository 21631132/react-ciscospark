import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import uuid from 'uuid';

import Avatar from '@ciscospark/react-component-avatar';
import {
  ICON_TYPE_MORE
} from '@ciscospark/react-component-icon';

import Button from '@ciscospark/react-component-button';

import styles from './styles.css';

export default function ParticipantListItem({
  canEdit,
  onEdit,
  participant
}) {

  const elementId = `ciscospark-participant-list-item-${uuid.v4()}`;
  let myNode;

  function getNode(node) {
    myNode = node;
  }

  function handleEditClick() {
    onEdit(participant, myNode);
  }

  const participantClasses = [
    `ciscospark-participant-list-item`,
    styles.participantListItem
  ];
  if (participant.external) {
    participantClasses.push(`ciscospark-participant-list-item-external`, styles.external);
  }
  return (
    <div
      className={classNames(participantClasses)}
      id={elementId}
      ref={getNode}
      title={participant.displayName}
    >
      <div className={classNames(`ciscospark-participant-list-avatar`, styles.avatar)}>
        <Avatar image={participant.avatar} name={participant.displayName} />
      </div>
      <div className={classNames(`ciscospark-participant-list-name`, styles.name)}>
        {participant.displayName}
      </div>
      { canEdit &&
        <div className={classNames(`ciscospark-participant-list-edit`, styles.edit)}>
          <div className={classNames(`ciscospark-participant-list-edit-button`, styles.editButton)}>
            <Button accessibilityLabel={`Edit Participant`} iconType={ICON_TYPE_MORE} onClick={handleEditClick} />
          </div>
        </div>
      }
    </div>
  );
}

ParticipantListItem.propTypes = {
  canEdit: PropTypes.bool,
  onEdit: PropTypes.func,
  participant: PropTypes.shape({
    avatar: PropTypes.string,
    displayName: PropTypes.string,
    external: PropTypes.bool,
    id: PropTypes.string
  }).isRequired
};
