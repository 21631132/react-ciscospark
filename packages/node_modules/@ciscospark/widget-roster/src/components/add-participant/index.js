import React from 'react';
import PropTypes from 'prop-types';
import isEmail from 'validator/lib/isEmail';

import classNames from 'classnames';
import Icon, {
  ICON_TYPE_EXIT,
  ICON_TYPE_INVITE
} from '@ciscospark/react-component-icon';
import Button from '@ciscospark/react-component-button';
import Spinner from '@ciscospark/react-component-spinner';
import PeopleList from '@ciscospark/react-component-people-list';

import styles from './styles.css';

export default function AddParticipant({
  noResultsMessage,
  onChange,
  onDismiss,
  onAddPerson,
  placeholder,
  searchResults,
  searchTerm
}) {
  const baseClassPrefix = 'ciscospark-roster-add-participant';

  function handleChange(e) {
    onChange(e.target.value);
  }

  function handleClose() {
    onChange('');
    onDismiss();
  }

  function handleClick(person) {
    onAddPerson(person);
  }

  function handleInvite() {
    onAddPerson(searchTerm);
  }

  function handleKeyPressInvite(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      onAddPerson(searchTerm);
    }
  }

  let results;
  if (searchResults) {
    if (searchResults.inProgress) {
      // eslint-disable-next-line no-extra-parens
      results = (
        <div className={classNames(`${baseClassPrefix}-results-loading`, styles.resultsLoading)}>
          <Spinner />
        </div>
      );
    }
    else if (searchResults.results && searchResults.results.length) {
      // eslint-disable-next-line no-extra-parens
      results = (
        <div className={classNames(`${baseClassPrefix}-results`, styles.results)}>
          <PeopleList
            items={[{people: searchResults.results}]}
            onItemClick={handleClick}
          />
        </div>
      );
    }
    else if (searchResults.results && searchResults.results.length === 0 && isEmail(searchTerm)) {
      /* eslint-disable jsx-a11y/no-static-element-interactions */
      // eslint-disable-next-line no-extra-parens
      results = (
        <div
          className={classNames(`${baseClassPrefix}-results-invite`, styles.resultsInvite)}
          onClick={handleInvite}
          onKeyPress={handleKeyPressInvite}
          role="button"
          tabIndex="0"
        >
          <div className={classNames(`${baseClassPrefix}-results-invite-icon`, styles.resultsInviteIcon)}><Icon type={ICON_TYPE_INVITE} /></div>
          <div>{`Invite ${searchTerm}`}</div>
        </div>
      );
      /* eslint-enable jsx-a11y/no-static-element-interactions */
    }
    else if (searchTerm) {
      // eslint-disable-next-line no-extra-parens
      results = (
        <div className={classNames(`${baseClassPrefix}-results-none`, styles.resultsNone)}>
          <div>{noResultsMessage}</div>
        </div>
      );
    }
  }

  return (
    <div className={classNames(`${baseClassPrefix}`, styles.addPartipicant)}>
      <div className={classNames(styles.searchBar)}>
        <input
          className={classNames(`${baseClassPrefix}-search-input`, styles.input)}
          onChange={handleChange}
          placeholder={placeholder}
          spellCheck={false}
          type="text"
          value={searchTerm}
        />
        <Button
          accessibilityLabel="Close Search"
          buttonClassName={classNames(`${baseClassPrefix}-close-button`, styles.closeButton)}
          iconType={ICON_TYPE_EXIT}
          onClick={handleClose}
        />
      </div>
      {results}
    </div>
  );
}

AddParticipant.propTypes = {
  noResultsMessage: PropTypes.string.isRequired,
  onAddPerson: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types
  onChange: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types
  onDismiss: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types
  placeholder: PropTypes.string.isRequired,
  searchResults: PropTypes.shape({
    inProgress: PropTypes.bool,
    date: PropTypes.number,
    results: PropTypes.array
  }),
  searchTerm: PropTypes.string
};
