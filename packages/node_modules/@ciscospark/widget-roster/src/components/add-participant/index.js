import React from 'react';
import PropTypes from 'prop-types';

import classNames from 'classnames';
import {
  ICON_TYPE_EXIT
} from '@ciscospark/react-component-icon';
import Button from '@ciscospark/react-component-button';
import Spinner from '@ciscospark/react-component-spinner';
import PersonListItem from '@ciscospark/react-component-person-list-item';

import styles from './styles.css';

export default function AddParticipant(props) {
  const baseClassPrefix = `ciscospark-roster-add-participant`;

  function handleChange(e) {
    props.onChange(e.target.value);
  }

  function handleClose() {
    props.onChange(``);
    props.onDismiss();
  }

  function handleClick(person) {
    props.onAddPerson(person);
  }

  function handleKeyPress(person, e) {
    if (e.key === `Enter` || e.key === ` `) {
      props.onAddPerson(person);
    }
  }

  let results;
  if (props.searchResults) {
    if (props.searchResults.inProgress) {
      // eslint-disable-next-line no-extra-parens
      results = (
        <div className={classNames(`${baseClassPrefix}-results-loading`, styles.resultsLoading)}>
          <Spinner />
        </div>
      );
    }
    else if (props.searchResults.results && props.searchResults.results.length) {
      // eslint-disable-next-line arrow-body-style
      const listing = props.searchResults.results.map((person) => {
        const onClick = handleClick.bind(this, person);
        const onKeyPress = handleKeyPress.bind(this, person);
        return (
          // eslint-disable-next-line jsx-a11y/no-static-element-interactions
          <div
            className={classNames(`${baseClassPrefix}-list-item`, styles.item)}
            key={person.id}
            onClick={onClick}
            onKeyPress={onKeyPress}
            role="button"
            tabIndex="0"
          >
            <PersonListItem
              person={person}
            />
          </div>
        );
      });
      // eslint-disable-next-line no-extra-parens
      results = (
        <div className={classNames(`${baseClassPrefix}-results`, styles.results)}>
          {listing}
        </div>
      );
    }
    else if (props.searchTerm) {
      // eslint-disable-next-line no-extra-parens
      results = (
        <div className={classNames(`${baseClassPrefix}-results-none`, styles.resultsNone)}>
          <div>{props.noResultsMessage}</div>
        </div>
      );
    }

  }

  return (
    <div className={classNames(`${baseClassPrefix}`, styles.addPartipicant)}>
      <div className={classNames(styles.searchBar)}>
        <input
          className={classNames(`${baseClassPrefix}-search-input`, styles.input)}
          onChange={handleChange}
          placeholder={props.placeholder}
          spellCheck={false}
          type="text"
          value={props.searchTerm}
        />
        <Button
          accessibilityLabel={`Close Search`}
          buttonClassName={classNames(`${baseClassPrefix}-close-button`, styles.closeButton)}
          iconType={ICON_TYPE_EXIT}
          onClick={handleClose}
        />
      </div>
      {results}
    </div>
  );
}

AddParticipant.propTypes = {
  noResultsMessage: PropTypes.string.isRequired,
  onAddPerson: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types
  onChange: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types
  onDismiss: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types
  placeholder: PropTypes.string.isRequired,
  searchResults: PropTypes.shape({
    inProgress: PropTypes.bool,
    date: PropTypes.number,
    results: PropTypes.array
  }),
  searchTerm: PropTypes.string
};
