import React, {PropTypes} from 'react';
import classNames from 'classnames';

import Avatar from '@ciscospark/react-component-avatar';
import messages from '../../messages';
import styles from './styles.css';

export default function SpaceItem({
  formatMessage,
  id,
  isUnread,
  lastActivityActorName,
  lastActivityTime,
  lastActivityText,
  lastActivityType,
  name,
  onClick,
  teamName,
  teamColor,
  type
}) {

  function handleClick() {
    return onClick(id);
  }
  let activityText = lastActivityText;
  if (lastActivityType === `share`) {
    activityText = formatMessage(messages.sharedFile);
  }

  return ( // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    <div
      className={classNames(`space-item`, styles.item)}
      onClick={handleClick}
      onKeyDown={handleClick}
      role="button"
      tabIndex="0"
    >
      {
        isUnread &&
        <div className={classNames(`space-unread-indicator`, styles.unreadIndicator)} />
      }
      <div className={classNames(`space-avatar-wrapper`, styles.avatarWrapper)}>
        <div className={classNames(`space-avatar-border`, type === `group` && styles.avatarGroup)}>
          <Avatar baseColor={teamColor} name={name} />
        </div>
      </div>
      <div className={classNames(`space-item-meta`, styles.meta)}>
        {
          teamName &&
          <div
            className={classNames(`space-team-name`, styles.teamName)}
            style={teamColor && {color: teamColor}}
          >
            {teamName}
          </div>
        }
        <div className={classNames(`space-title`, styles.title)}>
          {name}
        </div>
        <div className={classNames(`space-last-activity`, styles.lastActivity)}>
          {lastActivityActorName.split(` `)[0]} <span className={styles.midDot} /> {activityText}
        </div>
      </div>
      <div className={classNames(`space-last-activity-time`, styles.timestamp)}>
        {lastActivityTime}
      </div>
    </div>
  );
}

SpaceItem.propTypes = {
  formatMessage: PropTypes.func,
  id: PropTypes.string,
  isUnread: PropTypes.bool,
  lastActivityActorName: PropTypes.string,
  lastActivityText: PropTypes.string,
  lastActivityTime: PropTypes.string,
  lastActivityType: PropTypes.string,
  name: PropTypes.string,
  onClick: PropTypes.func,
  teamColor: PropTypes.string,
  teamName: PropTypes.string,
  type: PropTypes.string
};
