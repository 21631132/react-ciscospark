import {fromJS} from 'immutable';

import avatar from '@ciscospark/redux-module-avatar';
import errors from '@ciscospark/redux-module-errors';
import features from '@ciscospark/redux-module-features';
import media from '@ciscospark/redux-module-media';
import mercury from '@ciscospark/redux-module-mercury';
import spaces from '@ciscospark/redux-module-spaces';
import teams from '@ciscospark/redux-module-teams';
import users from '@ciscospark/redux-module-users';


import {
  UPDATE_STATUS,
  UPDATE_VISIBILITY_COUNT
} from './actions';

export const initialState = fromJS({
  visibilityCount: 15,
  status: {
    hasFetchedFeatureFlags: false,
    isFetchingFeatureFlags: false,
    isListeningForNewActivity: false
  }
});

export function reducer(state = initialState, action) {
  switch (action.type) {
    case UPDATE_STATUS:
      return state.mergeIn(['status'], action.payload.status);

    case UPDATE_VISIBILITY_COUNT:
      return state.set('visibilityCount', action.payload.count);

    default:
      return state;
  }
}

const reducers = {
  avatar,
  errors,
  features,
  media,
  mercury,
  spaces,
  teams,
  users,
  widgetRecents: reducer
};

export default reducers;
