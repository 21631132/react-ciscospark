import {createSelector} from 'reselect';
import moment from 'moment';
import {formatDate} from '@ciscospark/react-component-utils';

const getWidget = (state) => state.widgetRecents;
const getSpark = (state) => state.spark;
const getUsers = (state) => state.user;
const getAvatars = (state) => state.avatar;
const getSpaces = (state) => state.spaces;


function constructSpace(space) {
  return {
    id: space.get(`id`),
    type: space.get(`type`),
    lastActivityTime: formatDate(space.get(`lastReadableActivityDate`)),
    lastActivityTimestamp: space.get(`lastReadableActivityDate`),
    lastActivityActorName: space.getIn([`latestActivity`, `actor`, `displayName`]),
    lastActivityType: space.getIn([`latestActivity`, `verb`]),
    lastActivityText: space.getIn([`latestActivity`, `object`, `displayName`]),
    participants: space.get(`participants`).toJS(),
    published: space.get(`published`),
    isLocked: space.get(`tags`) && space.get(`tags`).includes(`LOCKED`),
    isUnread: moment(space.get(`lastSeenActivityDate`)).isBefore(space.get(`lastReadableActivityDate`))
  };
}

function constructOneOnOne(space, currentUser) {
  const thisSpace = constructSpace(space);
  const currentUserEmail = currentUser.email;
  const otherUsers = space.get(`participants`)
    .find((p) => p.get(`emailAddress`) !== currentUserEmail);
  if (otherUsers) {
    thisSpace.name = otherUsers.get(`displayName`);
  }
  return thisSpace;
}

function constructGroup(space) {
  const thisSpace = constructSpace(space);
  const avatars = space.getIn([`avatar`, `files`, `items`]);
  if (avatars && avatars.first()) {
    thisSpace.avatarUrl = avatars.first().get(`url`);
  }
  thisSpace.name = space.get(`displayName`);
  const team = space.get(`team`);
  if (team) {
    thisSpace.teamName = team.get(`displayName`);
    thisSpace.teamColor = team.get(`color`);
    thisSpace.teamId = team.get(`id`);
  }
  return thisSpace;
}

const getRecentSpaces = createSelector(
  [getSpaces, getUsers],
  (spaces, users) => {
    const currentUser = users.get(`currentUser`);
    const recents = spaces.get(`items`)
      .map((space) => {
        if (space.get(`type`) === `direct`) {
          return constructOneOnOne(space, currentUser);
        }
        return constructGroup(space);
      });
    return recents;
  }
);

export const getRecentsWidgetProps = createSelector(
  [getWidget, getUsers, getAvatars, getSpaces, getRecentSpaces, getSpark],
  (widget, user, avatar, spaces, spacesList, spark) => ({ // eslint-disable-line max-params
    widgetRecent: widget,
    sparkState: spark.get(`status`),
    sparkInstance: spark.get(`spark`),
    user,
    avatar,
    spaces,
    spacesList
  })
);
