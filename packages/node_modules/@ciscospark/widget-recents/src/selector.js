import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetRecents;
const getSpark = (state) => state.spark;
const getUsers = (state) => state.user;
const getAvatars = (state) => state.avatar;
const getSpaces = (state) => state.spaces;

const TAG_ONE_ON_ONE = `ONE_ON_ONE`;

function constructSpace(space) {
  return {
    id: space.id,
    lastActivityTime: space.get(`lastRelevantActivityDate`),
    lastActivityText: space.getIn([`activities`, `items`]).first().getIn([`object`, `displayName`])
  };
}

function constructOneOnOne(space, currentUser) {
  const thisSpace = constructSpace(space);
  const currentUserEmail = currentUser.email;
  thisSpace.name = space.getIn([`participants`, `items`])
    .find((p) => p.get(`emailAddress`) !== currentUserEmail).get(`displayName`);
  return thisSpace;
}

function constructGroup(space) {
  const thisSpace = constructSpace(space);
  const avatars = space.getIn([`avatar`, `files`, `items`])
  if (avatars && avatars.first()) {
    thisSpace.avatarUrl = avatars.first().get(`url`);
  }
  thisSpace.name = space.get(`displayName`);
  return thisSpace;
}

const getRecentSpaces = createSelector(
  [getSpaces, getUsers],
  (spaces, users) => {
    const currentUser = users.get(`currentUser`);
    const recents = spaces.get(`items`).map((space) => {
      if (space.get(`tags`).includes(TAG_ONE_ON_ONE)) {
        return constructOneOnOne(space, currentUser)
      }
      return constructGroup(space);
    });
    return recents;
  }
);

export const getRecentsWidgetProps = createSelector(
  [getWidget, getUsers, getAvatars, getSpaces, getRecentSpaces, getSpark],
  (widget, users, avatars, spaces, spacesList, spark) => ({ // eslint-disable-line max-params
    widgetRecent: widget,
    sparkState: spark.get(`status`),
    sparkInstance: spark.get(`spark`),
    users,
    avatars,
    spaces,
    spacesList
  })
);
