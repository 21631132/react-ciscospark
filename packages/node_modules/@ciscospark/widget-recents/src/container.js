import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import autobind from 'autobind-decorator';

import LoadingScreen from '@ciscospark/react-component-loading-screen';
import {fetchCurrentUser} from '@ciscospark/redux-module-user';
import {fetchSpaces} from '@ciscospark/redux-module-spaces';
import {connectToMercury} from '@ciscospark/redux-module-mercury';

import messages from './messages';
import {getRecentsWidgetProps} from './selector';
import SpacesList from './components/spaces-list';
import styles from './styles.css';

export class SpaceWidget extends Component {

  componentWillMount() {
    this.setup(this.props);
  }

  componentWillReceiveProps(nextProps) {
    this.setup(nextProps);
  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  componentWillUnmount() {
    this.props.sparkInstance.mercury.disconnect().then(() => this.props.removeWidget());
  }

  @autobind
  setup(props) { // eslint-disable-line complexity
    const {
      sparkInstance,
      sparkState,
      mercury,
      user,
      spaces
    } = props;

    if (sparkInstance && sparkState.get(`authenticated`) && sparkState.get(`registered`)) {
      // Get current user details
      if (!user.getIn([`status`, `isFetchingCurrentUser`]) && !user.get(`currentUser`)) {
        props.fetchCurrentUser(sparkInstance);
      }

      // Setup Web Sockets
      if (!mercury.getIn([`status`, `hasConnected`])
        && !mercury.getIn([`status`, `isConnecting`])
        && !mercury.getIn([`status`, `isConnected`])
        && sparkInstance.device.registered) {
        props.connectToMercury(sparkInstance);
      }

      // Grab spaces
      if (!spaces.getIn([`status`, `isFetching`])
        && !spaces.get(`items`).count()) {
        props.fetchSpaces(sparkInstance);
      }
    }
  }

  @autobind
  handleSpaceClick(space) {
    return space;
  }

  render() {
    const props = this.props;
    const {
      spacesList
    } = props;
    const {formatMessage} = props.intl;
    if (spacesList && spacesList.count()) {
      return <SpacesList onClick={this.handleSpaceClick} spaces={spacesList} />;
    }
    return <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />;
  }
}

const injectedPropTypes = {
  mercury: PropTypes.object,
  sparkInstance: PropTypes.object,
  user: PropTypes.object,
  spaces: PropTypes.object,
  spacesList: PropTypes.object,
  widgetRecents: PropTypes.object,
  connectToMercury: PropTypes.func
};

export const ownPropTypes = {
  muteNotifications: PropTypes.bool
};

SpaceWidget.propTypes = {
  ...injectedPropTypes,
  ...ownPropTypes
};


function mapStateToProps(state) {
  return getRecentsWidgetProps(state);
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    connectToMercury,
    fetchCurrentUser,
    fetchSpaces
  }, dispatch)
)(SpaceWidget);
