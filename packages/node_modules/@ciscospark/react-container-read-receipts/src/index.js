import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';

import classNames from 'classnames';

import {getReadReceipts} from './selectors';

import TypingAvatar from '@ciscospark/react-component-typing-avatar';
import Badge from '@ciscospark/react-component-badge';

import styles from './styles.css';

export class ReadReceipts extends Component {
  shouldComponentUpdate(nextProps) {
    const {props} = this;
    return nextProps.readReceipts !== props.readReceipts;
  }

  render() {
    const {users, totalCount} = this.props.readReceipts;
    const readReceipts = users.map((user) =>
      <TypingAvatar
        image={user.image}
        isTyping={user.isTyping}
        key={user.userId}
        name={user.displayName}
      />
    );
    const remainingUsers = totalCount - users.length;
    if (remainingUsers) {
      readReceipts.push(
        <Badge>
          {`+${remainingUsers}`}
        </Badge>
      );
    }

    return (
      <div className={classNames(`ciscospark-read-receipts`, styles.readReceipts)}>
        {readReceipts}
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    readReceipts: getReadReceipts(state)
  };
}

ReadReceipts.propTypes = {
  readReceipts: PropTypes.object
};

export default connect(
  mapStateToProps
)(ReadReceipts);
