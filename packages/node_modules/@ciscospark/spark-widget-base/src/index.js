import {
  compose,
  setDisplayName,
  wrapDisplayName,
  setStatic,
  toClass
} from 'recompose';

import {withSpark} from '@ciscospark/react-redux-spark';
import {withSparkMetrics} from '@ciscospark/react-redux-spark-metrics';
import '@ciscospark/react-component-spark-fonts';

import {
  withInitialState,
  withBrowserGlobals,
  withDOMEvents,
  withIntl,
  withDataAPI,
  withRemoveWidget
} from './enhancers';

import './styles.css';

/**
 * Creates an enhancer HOC that provides a store and connection to Spark
 * @param {Object} options
 * @param {Object} options.reducers Map of reducers that should be used to init a Store
 * @param {Object} options.enhancers Map of enhancers that should be used to init a Store
 * @returns {Object} React Component
 */
export function constructSparkEnhancer({
  name,
  reducers,
  enhancers
}) {
  // Executes bottom to top. Bottom most HOC Will be the inner most Component
  return (BaseComponent) => compose(
    // Instantiates Widgets into DOM with Data API (Must be at the top of compose)
    withDataAPI({name}),
    // Try to inject browser globals into global namespace
    withBrowserGlobals({name}),
    // Initialize state with react-redux Provider
    withInitialState({reducers, enhancers}),
    // Attach DOM event triggers
    withDOMEvents(),
    // Clears store on Remove
    withRemoveWidget(),
    // Add Metrics mothods as props
    withSparkMetrics(name),
    // Connects and Auths with Spark API
    withSpark(),
    // Set distinct display name
    setDisplayName(wrapDisplayName(BaseComponent, 'SparkWidgetBase')),
    // Inject version number into component as static prop
    setStatic('version', process.env.REACT_CISCOSPARK_VERSION),
  )(toClass(BaseComponent));
}

/**
 * Builds a Spark widget out of a React component
 * @param {String} name unique component name to inject into the global namespace
 * @param {Object} BaseComponent React Component
 * @returns {Object} React Component
 */
export default function SparkWidgetBase(name, BaseComponent) {
  return constructSparkEnhancer(name)(BaseComponent);
}

export {
  withIntl,
  withInitialState,
  withBrowserGlobals,
  withDOMEvents
};
