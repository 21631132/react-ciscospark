import React from 'react';
import ReactDOM from 'react-dom';
import uuid from 'uuid';

function BrowserWidget(el) {
  this.el = el;
  this.remove = (callback) => new Promise((resolve) => {
    const id = this.el.getAttribute('data-uuid');
    // Unmount React Component
    const removed = ReactDOM.unmountComponentAtNode(el);

    // Remove from widgetStore
    Reflect.deleteProperty(window.ciscospark.widgetStore, id);

    // Fire callback
    if (typeof callback === 'function') {
      return callback(removed);
    }

    return resolve(removed);
  });

  Object.assign(this, window.ciscospark.widgetFn);

  return this;
}


/**
 * Takes a DOM element and returns a widget or initializes it as a widget element
 * @param {Element} el
 * @returns {Object}
 */
function getWidget(el) {
  /**
   * Creates a new widget object and stores it
   * @param  {object} widgetEl HTML element where a widget is mounted
   * @returns {object} widgetObject
   */
  function createNewWidget(widgetEl) {
    const widgetObj = new BrowserWidget(widgetEl);
    const id = uuid.v4();
    // Store ID as attribute on dom element
    widgetEl.setAttribute('data-uuid', id);
    window.ciscospark.widgetStore[id] = widgetObj;
    return widgetObj;
  }

  /**
   * Retrieves a Widget from global widget store
   * @param  {object} widgetEl HTML element where a widget is mounted
   * @returns {object} widgetObject
   */
  function selectWidget(widgetEl) {
    // Check if element exists and is HTML Element
    if (widgetEl && widgetEl.nodeType === 1) {
      // Get ID as attribute on dom element
      const id = widgetEl.getAttribute('data-uuid');
      // Add class
      widgetEl.classList.add('ciscospark-widget');
      // Get widget from store if it exists
      const widgetObj = window.ciscospark.widgetStore[id];
      if (widgetObj) {
        return widgetObj;
      }
      // Otherwise create new widget store
      return createNewWidget(widgetEl);
    }
    console.warn('WARNING: ciscospark.widget: No HTML element provided.'); // eslint-disable-line no-console
    return false;
  }

  return selectWidget(el);
}


function setupSparkWidgetNamespace() {
  if (!window.ciscospark) {
    window.ciscospark = {};
  }
  if (!window.ciscospark.widgetStore) {
    window.ciscospark.widgetStore = {};
  }
  if (!window.ciscospark.widgetFn) {
    window.ciscospark.widgetFn = {};
  }
  if (!window.ciscospark.widget || typeof window.ciscospark.widget !== 'function') {
    window.ciscospark.widget = getWidget;
  }
}

/**
 * HOC that registers widget to browser globals
 * @param {String} name of widget to use
 * @returns {Function}
 */
export default function withBrowserGlobals({name}) {
  // Inject widget into browser globals
  setupSparkWidgetNamespace();
  const fnName = `${name}Widget`;

  return (BaseComponent) => {
    const {
      version
    } = BaseComponent;

    function renderSparkWidget(options) {
      const {el} = this;

      // Instantiate Component into DOM
      ReactDOM.render(<BaseComponent {...options} />, el);

      return this;
    }

    // Set up this widget's init process
    // Allow dev to call window.ciscospark.widget(EL).WIDGETNAME({options});
    if (typeof window.ciscospark.widgetFn[fnName] === 'function') {
      // eslint-disable-reason Need to log console warning when widget already registered
      // eslint-disable-next-line no-console
      console.warn(`${name} Widget is already registered.`);
    }
    else {
      window.ciscospark.widgetFn[fnName] = renderSparkWidget;
      window.ciscospark.widgetFn[fnName].version = version;
    }

    return BaseComponent;
  };
}
