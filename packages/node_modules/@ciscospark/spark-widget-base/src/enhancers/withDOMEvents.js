import React, {Component} from 'react';
import PropTypes from 'prop-types';
import Events from 'ampersand-events';
import {toClass} from 'recompose';

import styles from '../styles.css';

function formatEventDetails({name, data}) {
  const [resource, eventName] = name.split(':');
  const details = {
    resource,
    event: eventName,
    data
  };

  if (data.actorId) {
    details.actorId = data.actorId;
  }

  if (data.action) {
    details.action = data.action;
  }

  return details;
}


const propTypes = {
  onEvent: PropTypes.func
};

const defaultProps = {
  onEvent: undefined
};


export default function withDOMEvents() {
  return (BaseComponent) => {
    const WrappedComponent = toClass(BaseComponent);

    class WithDOMEvents extends Component {
      constructor(props) {
        super(props);
        this.handleEvent = this.handleEvent.bind(this);
        this.getEl = this.getEl.bind(this);
      }

      getEl(el) {
        this.el = el;
      }

      handleEvent(name, data) {
        if (this.el) {
          const {onEvent} = this.props;
          // Don't nest data if the event data object is already constructed
          const detail = data.data ? data : formatEventDetails({name, data});
          // Dispatch DOM event
          const event = new CustomEvent(name, {
            detail
          });
          this.el.dispatchEvent(event);

          // Trigger ampersand events
          this.trigger(name, detail);

          // Trigger onEvent callback
          if (typeof onEvent === 'function') {
            return onEvent(name, detail);
          }
        }

        return this;
      }

      render() {
        const {onEvent, ...otherProps} = this.props;
        return (
          <div ref={this.getEl} className={styles.wrapper}>
            <WrappedComponent onEvent={this.handleEvent} {...otherProps} />
          </div>
        );
      }
    }

    WithDOMEvents.propTypes = propTypes;
    WithDOMEvents.defaultProps = defaultProps;

    Object.assign(WithDOMEvents.prototype, Events);

    return WithDOMEvents;
  };
}
