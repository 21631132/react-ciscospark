import {fromJS} from 'immutable';

import {
  UPDATE_STATUS,
  UPDATE_CALL_STATE,
  UPDATE_LOCAL_MEDIA,
  UPDATE_REMOTE_MEDIA,
  CALL_CONNECTED,
  CALL_DISCONNECTED
} from './actions';

export const initialState = fromJS({
  call: null,
  remoteStream: {
    url: null,
    hasAudio: false,
    hasVideo: false
  },
  localStream: {
    url: null,
    sendAudio: true,
    sendVideo: true
  },
  callState: {},
  status: {
    isCalling: false,
    isRinging: false,
    isConnected: false,
    hasSelfView: false
  }
});

export default function reducer(state = initialState, action) {
  switch (action.type) {
  case UPDATE_STATUS:
    return state.mergeIn([`status`], action.payload.status);
  case UPDATE_CALL_STATE:
    return state.mergeIn([`callState`], action.payload.callState);
  case UPDATE_LOCAL_MEDIA:
    return state.mergeIn([`localStream`], action.payload.mediaState);
  case UPDATE_REMOTE_MEDIA:
    return state.mergeIn([`remoteStream`], action.payload.mediaState);
  case CALL_CONNECTED: {
    const call = action.payload.call;
    return state
      .set(`call`, call)
      .setIn([`status`, `isConnected`], true)
      .setIn([`status`, `isCalling`], false)
      .setIn([`localStream`, `url`], call.localMediaStreamUrl)
      .setIn([`remoteStream`, `url`], call.remoteMediaStreamUrl);
  }
  case CALL_DISCONNECTED: {
    return initialState;
  }
  default:
    return state;
  }
}
