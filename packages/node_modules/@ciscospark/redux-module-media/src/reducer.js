import {fromJS, Record} from 'immutable';

import {
  UPDATE_STATUS,
  UPDATE_CALL_STATE,
  CONNECT_CALL,
  REMOVE_CALL,
  STORE_CALL,
  CHECKING_WEB_RTC_SUPPORT,
  UPDATE_WEBRTC_SUPPORT
} from './actions';

export const CallRecord = new Record({
  id: null,
  instance: null,
  spaceId: null,
  callState: {},
  callStartTime: null
});

export const initialState = fromJS({
  calls: {},
  webRTC: {
    hasCheckedSupport: false,
    isSupported: null
  },
  status: {
    isListening: false
  }
});

export default function reducer(state = initialState, action) {
  switch (action.type) {
    case UPDATE_STATUS:
      return state.mergeIn(['status'], action.payload.status);

    case STORE_CALL: {
      const {call, callState, locusUrl} = action.payload;
      const id = locusUrl || call.locus && call.locus.url;
      if (id) {
        const callRecord = new CallRecord({
          callState,
          id,
          instance: call
        });
        return state.setIn(['calls', id], callRecord);
      }
      return state;
    }

    case UPDATE_CALL_STATE: {
      const {call, callState, locusUrl} = action.payload;
      const id = locusUrl || call.locus && call.locus.url;
      if (id) {
        return state.mergeIn(['calls', id, 'callState'], callState);
      }
      return state;
    }

    case CONNECT_CALL: {
      const {call, callState} = action.payload;
      const {locus} = call;
      if (locus && locus.url) {
        return state
          .setIn(['calls', locus.url, 'instance'], call)
          .mergeIn(['calls', locus.url, 'callState'], callState)
          .setIn(['calls', locus.url, 'callStartTime'], Date.parse(locus.fullState.lastActive));
      }
      return state;
    }

    case REMOVE_CALL: {
      const locusUrl = action.payload.locusUrl || action.payload.locus.url;
      if (locusUrl) {
        return state.deleteIn(['calls', locusUrl]);
      }
      return state;
    }

    case CHECKING_WEB_RTC_SUPPORT:
      return state.setIn(['webRTC', 'hasCheckedSupport'], true);

    case UPDATE_WEBRTC_SUPPORT:
      return state.setIn(['webRTC', 'isSupported'], action.payload.supported);

    default:
      return state;
  }
}
