import {fromJS} from 'immutable';

import {
  UPDATE_STATUS,
  UPDATE_CALL_STATE,
  CONNECT_CALL,
  REMOVE_CALL,
  STORE_CALL,
  CHECK_WEBRTC_SUPPORT,
  UPDATE_WEBRTC_SUPPORT
} from './actions';

const initialCallObject = fromJS({
  instance: null,
  spaceId: null,
  callState: {},
  startTime: null
});

export const initialState = fromJS({
  calls: {},
  webRTC: {
    hasCheckedSupport: false,
    isSupported: null
  },
  status: {
    isListening: false
  }
});


// eslint-disable-next-line complexity
export default function reducer(state = initialState, action) {
  switch (action.type) {

  case UPDATE_STATUS:
    return state.mergeIn([`status`], action.payload.status);

  case STORE_CALL: {
    const {call, callState, id} = action.payload;
    const locusId = id || call.locus.id;
    if (locusId) {
      const callObject = initialCallObject
        .set(`instance`, call)
        .mergeIn([`callState`], callState);
      return state.setIn([`calls`, id], callObject);
    }
  }

  case UPDATE_CALL_STATE: {
    const {call, callState} = action.payload;
    return state.mergeIn([`calls`, call.locus.id, `callState`], callState);
  }

  case CONNECT_CALL: {
    const {call, callState} = action.payload;
    return state
      .set(`instance`, call)
      .mergeIn([`calls`, call.locus.id, `callState`], callState)
      .setIn([`calls`, call.locus.id, `callStartTime`], Date.parse(call.locus.fullState.lastActive));
  }

  case REMOVE_CALL:
    return state.deleteIn([`calls`, action.payload.call.locus.id]);

  case CHECK_WEBRTC_SUPPORT:
    return state.setIn([`webRTC`, `isCheckingSupport`], true);

  case UPDATE_WEBRTC_SUPPORT:
    return state.setIn([`webRTC`, `isSupported`], action.payload.supported);

  default:
    return state;
  }
}
