export const ADD_AVATAR = `avatar/ADD_AVATAR`;
export const ADD_AVATAR_BEGIN = `avatar/ADD_AVATAR_BEGIN`;

import {bufferToBlob} from '@ciscospark/react-component-utils';

function addAvatar(userId, avatar) {
  return {
    type: ADD_AVATAR,
    payload: {
      userId,
      avatar
    }
  };
}

function addAvatarBegin(userId) {
  return {
    type: ADD_AVATAR_BEGIN,
    payload: {
      userId
    }
  };
}

/**
 * Fetches a group of users' avatars
 * @param {Array} userIds
 * @param {object} spark
 * @returns {Thunk}
 */
export function fetchAvatarsForUsers(userIds, spark) {
  const promises = [];
  return (dispatch) => {
    userIds.forEach((userId) => {
      promises.push(dispatch(fetchAvatarForUserId(userId, spark)));
    });
    return Promise.all(promises);
  };
}

/**
 * Fetches an avatar for a given user id
 * @param {string} userId
 * @param {object} spark
 * @returns {Thunk}
 */
export function fetchAvatarForUserId(userId, spark) {
  return (dispatch, getState) => {
    const state = getState().avatar;
    const fetched = state.hasIn([`items`, userId]);
    const fetching = state.hasIn([`avatarsInFlight`, userId]);
    if (fetched || fetching) {
      return Promise.resolve();
    }

    dispatch(addAvatarBegin(userId));
    return spark.people.get(userId)
      .then((person) => dispatch(addAvatar(userId, person.avatar)))
      .catch(() => dispatch(addAvatar(userId, undefined)));
  };
}

export function fetchSpaceAvatar(space, sparkInstance, userIdForAvatar) {
  return (dispatch, getState) => {
    const state = getState().avatar;
    const fetched = state.hasIn([`items`, space.id]);
    const fetching = state.hasIn([`avatarsInFlight`, space.id]);
    if (fetched || fetching) {
      return Promise.resolve();
    }
    if (space.type === `direct`) {
      if (!userIdForAvatar) {
        return Promise.reject(new Error(`Direct spaces require a user id to display`));
      }
      dispatch(addAvatarBegin(space.id));
      return sparkInstance.people.get(userIdForAvatar)
        .then((person) => dispatch(addAvatar(space.id, person.avatar)))
        .catch(() => dispatch(addAvatar(space.id, undefined)));
    }
    if (space.avatar) {
      dispatch(addAvatarBegin(space.id));
      return sparkInstance.internal.conversation.download(space.avatar.files.items[0])
        .then((file) => {
          const {objectUrl} = bufferToBlob(file);
          dispatch(addAvatar(space.id, objectUrl));
        });
    }
    dispatch(addAvatar(space.id, undefined));
    return Promise.resolve();
  };
}
