export const ADD_AVATAR = `avatar/ADD_AVATAR`;
export const ADD_AVATAR_BEGIN = `avatar/ADD_AVATAR_BEGIN`;

import {bufferToBlob} from '@ciscospark/react-component-utils';

function addAvatar(id, avatar) {
  return {
    type: ADD_AVATAR,
    payload: {
      id,
      avatar
    }
  };
}

function addAvatarBegin(id) {
  return {
    type: ADD_AVATAR_BEGIN,
    payload: {
      id
    }
  };
}

/**
 * Fetches a group of users' avatars
 * @param {Array} userIds
 * @param {object} spark
 * @returns {Thunk}
 */
export function fetchAvatarsForUsers(userIds, spark) {
  return (dispatch) => Promise.all(userIds.map((userId) => dispatch(fetchAvatar({userId}, spark))));
}


/**
 * Fetches an avatar for a given space or user id
 * @param {Object} params
 * @param {Object} params.space
 * @param {String} params.userId
 * @param {Object} spark
 * @returns {Thunk}
 */
export function fetchAvatar({space, userId}, spark) {
  return (dispatch, getState) => {
    const avatar = getState().avatar;
    const avatarId = space ? space.id : userId;
    const fetched = avatar.hasIn([`items`, avatarId]);
    const fetching = avatar.hasIn([`avatarsInFlight`, avatarId]);

    if (fetched || fetching) {
      return Promise.resolve();
    }

    if (space) {
      return dispatch(fetchSpaceAvatar(space, spark, userId));
    }
    return dispatch(fetchUserAvatar(userId, spark));
  };
}


function fetchUserAvatar(userId, spark) {
  return (dispatch) => {
    dispatch(addAvatarBegin(userId));
    return spark.people.get(userId)
      .then((person) => dispatch(addAvatar(userId, convertToSmallAvatar(person.avatar))))
      .catch(() => {
        dispatch(addAvatar(userId));
        return Promise.resolve({id: userId});
      });
  };
}

function fetchSpaceAvatar(space, sparkInstance, userIdForAvatar) {
  return (dispatch) => {
    if (space.type === `direct`) {
      if (!userIdForAvatar) {
        return Promise.reject(new Error(`Direct spaces require a user id to display`));
      }
      return dispatch(fetchUserAvatar(userIdForAvatar, sparkInstance));
    }
    if (space.avatar) {
      dispatch(addAvatarBegin(space.id));
      return sparkInstance.internal.conversation.download(space.avatar.files.items[0])
        .then((file) => {
          const {objectUrl} = bufferToBlob(file);
          dispatch(addAvatar(space.id, objectUrl));
          return Promise.resolve({id: space.id});
        });
    }
    return Promise.resolve(dispatch(addAvatar(space.id)));
  };
}

/**
 * A bit of a hack to get smaller Avatars from Public API
 */

function convertToSmallAvatar(avatarUrl) {
  const sizeRegEx = /\~\d+$/;
  if (sizeRegEx.test(avatarUrl)) {
    return avatarUrl.replace(sizeRegEx, `~110`);
  }
  return avatarUrl;
}
