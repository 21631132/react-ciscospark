/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

import {initialState} from '.';
import * as actions from '.';

let mockSpark;

const person = {
  avatar: {}
};

let mockState = {};

describe(`redux-module-avatar actions `, () => {
  beforeEach(() => {
    mockSpark = {
      people: {
        get: jest.fn(() => Promise.resolve(person))
      }
    };

    mockState = {avatar: initialState};
  });

  it(`has exported actions`, () => {
    expect(actions.fetchAvatarForUserId).toBeDefined();
    expect(actions.fetchAvatarsForUsers).toBeDefined();
  });

  describe(`#fetchAvatarForUserId`, () => {

    it(`can fetch an Avatar`, () => {
      const store = mockStore(mockState);
      return store.dispatch(actions.fetchAvatarForUserId(`userId`, mockSpark))
        .then(() => {
          expect(mockSpark.people.get).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

    it(`does not fetch an avatar already fetched`, () => {
      const userId = `abc-123`;
      mockState.avatar = mockState.avatar.setIn([`items`, userId], {mocked: true});
      const store = mockStore(mockState);
      return store.dispatch(actions.fetchAvatarForUserId(userId, mockSpark))
        .then(() => {
          expect(mockSpark.people.get).not.toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

    it(`does not fetch an avatar in flight`, () => {
      const userId = `abc-123`;
      mockState.avatar = mockState.avatar.setIn([`avatarsInFlight`, userId], {mocked: true});
      const store = mockStore(mockState);
      return store.dispatch(actions.fetchAvatarForUserId(userId, mockSpark))
        .then(() => {
          expect(mockSpark.people.get).not.toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

    it(`handles errors from the people plugin`, () => {
      const userId = `abc-123`;
      const store = mockStore(mockState);
      mockSpark.people.get = jest.fn(() => Promise.reject());
      return store.dispatch(actions.fetchAvatarForUserId(userId, mockSpark))
        .then(() => {
          expect(mockSpark.people.get).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });
  });

  describe(`#fetchAvatarsForUsers`, () => {
    it(`can fetch avatars for all users`, () => {
      const store = mockStore(mockState);
      return store.dispatch(actions.fetchAvatarsForUsers([`a`, `b`], mockSpark))
        .then(() => {
          expect(mockSpark.people.get).toHaveBeenCalledTimes(2);
          expect(store.getActions()).toMatchSnapshot();
        });
    });

    it(`only fetches avatars not in flight and fetched`, () => {
      const userId1 = `abc-123`;
      const userId2 = `abc-1234`;
      const aNewUser = `a-new-user`;
      mockState.avatar = mockState.avatar.setIn([`items`, userId1], {mocked: true});
      mockState.avatar = mockState.avatar.setIn([`avatarsInFlight`, userId2], {mocked: true});
      const store = mockStore(mockState);
      return store.dispatch(actions.fetchAvatarsForUsers([userId1, userId2, aNewUser], mockSpark))
        .then(() => {
          expect(mockSpark.people.get).toHaveBeenCalledTimes(1);
          expect(store.getActions()).toMatchSnapshot();
        });
    });
  });
});
