/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

import {initialState} from '.';
import * as actions from '.';

let mockSpark;

const person = {
  avatar: {}
};


describe(`redux-module-avatar actions `, () => {
  beforeEach(() => {
    mockSpark = {
      people: {
        get: jest.fn(() => Promise.resolve(person))
      }
    };
  });

  it(`has exported actions`, () => {
    expect(actions.fetchAvatarForUserId).toBeDefined();
  });

  describe(`#fetchAvatarForUserId`, () => {

    it(`can fetch an Avatar`, () => {
      const store = mockStore(initialState);
      return store.dispatch(actions.fetchAvatarForUserId(`userId`, mockSpark))
        .then(() => {
          expect(mockSpark.people.get).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });

    });
  });
});
