export const initialState = {
  items: {},
  avatarsInFlight: []
};

export const ADD_AVATAR = `ADD_AVATAR`;
export const ADD_AVATAR_BEGIN = `ADD_AVATAR_BEGIN`;

export default function reducer(state = initialState, action) {
  switch (action.type) {
  case ADD_AVATAR:
    {
      const {userId, avatar} = action.payload;
      const avatarObj = {};
      avatarObj[userId] = avatar;
      const avatars = Object.assign({}, state.items, avatarObj);
      const avatarsInFlight = state.avatarsInFlight.filter((inFlightId) => inFlightId !== userId);
      return Object.assign({}, state, {
        avatars,
        avatarsInFlight
      });
    }
  case ADD_AVATAR_BEGIN:
    return Object.assign({}, state, {
      avatarsInFlight: [...state.avatarsInFlight, action.payload.userId]
    });
  default:
    return state;
  }
}


export function fetchAvatarForUserId(userId, spark) {
  return (dispatch) => {
    dispatch(addAvatarBegin(userId));
    return spark.items.retrieveAvatarUrl(userId)
      .then((avatarUrl) =>
        dispatch(addAvatar(userId, avatarUrl))
      );
  };
}

function addAvatar(userId, avatar) {
  return {
    type: ADD_AVATAR,
    payload: {
      userId,
      avatar
    }
  };
}

function addAvatarBegin(userId) {
  return {
    type: ADD_AVATAR_BEGIN,
    payload: {
      userId
    }
  };
}
