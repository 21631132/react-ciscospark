/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

import reducer, {STORE_SEARCH_TERM, DO_SEARCH_ERROR, STORE_SEARCH_RESULTS, searchForUser, initialState} from '.';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

const mockSpark = {
  internal: {
    search: {
      people: jest.fn(() => Promise.resolve([`myuser`]))
    }
  }
};

describe(`redux-module-search`, () => {
  describe(`actions`, () => {
    it(`has exported actions`, () => {
      expect(searchForUser).toBeDefined();
    });

    describe(`#searchForUser`, () => {
      it(`can search a user`, () => {
        const store = mockStore({});
        return store.dispatch(searchForUser(`myuser`, mockSpark))
          .then(() => {
            expect(store.getActions()).toMatchSnapshot();
          });
      });
    });
  });

  describe(`reducer`, () => {
    it(`should return initial state`, () => {
      expect(reducer(undefined, {}))
        .toMatchSnapshot();
    });

    it(`should handle STORE_SEARCH_TERM`, () => {
      expect(reducer(initialState, {
        type: STORE_SEARCH_TERM,
        payload: {
          searchTerm: `mysearch`
        }
      })).toMatchSnapshot();
    });

    it(`should handle DO_SEARCH_ERROR`, () => {
      expect(reducer(initialState, {
        type: DO_SEARCH_ERROR,
        payload: {
          error: new Error(`unable to search`)
        }
      })).toMatchSnapshot();
    });

    it(`should handle STORE_SEARCH_RESULTS`, () => {
      expect(reducer(initialState, {
        type: STORE_SEARCH_RESULTS,
        payload: {
          searchTerm: `mysearch`,
          searchResults: [`abc`, `123`]
        }
      })).toMatchSnapshot();
    });

    it(`should update existing results when calling STORE_SEARCH_RESULTS`, () => {
      const initialResults = reducer(initialState, {
        type: STORE_SEARCH_RESULTS,
        payload: {
          searchTerm: `mysearch`,
          searchResults: [`abc`, `123`]
        }
      });
      expect(reducer(initialResults, {
        type: STORE_SEARCH_RESULTS,
        payload: {
          searchTerm: `mysearch`,
          searchResults: [`def`, `456`]
        }
      })).toMatchSnapshot();
    });
  });
});
