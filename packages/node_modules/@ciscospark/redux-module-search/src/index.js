import {fromJS} from 'immutable';

export const DO_SEARCH_ERROR = `search/DO_SEARCH_ERROR`;
export const STORE_SEARCH_RESULTS = `search/STORE_SEARCH_RESULTS`;
export const STORE_SEARCH_TERM = `search/STORE_SEARCH_TERM`;

export const initialState = fromJS({
  error: null,
  status: {
    isError: false
  },
  searchResults: {}
});

export default function reducer(state = initialState, action) {
  switch (action.type) {
  case STORE_SEARCH_TERM:
    return state
      .setIn([`status`, `isError`], false)
      .setIn([`searchResults`, action.payload.searchTerm, `inProgress`], true);
  case DO_SEARCH_ERROR:
    return state
      .setIn([`status`, `isError`], true)
      .set(`error`, action.payload.error);
  case STORE_SEARCH_RESULTS:
    return state
      .mergeIn([`searchResults`, action.payload.searchTerm], fromJS({
        inProgress: false,
        date: Date.now(),
        results: action.payload.searchResults
      }));
  default:
    return state;
  }
}

function storeSearchTerm(searchTerm) {
  return {
    type: STORE_SEARCH_TERM,
    payload: {
      searchTerm
    }
  };
}

function doSearchError(error) {
  return {
    type: DO_SEARCH_ERROR,
    payload: {
      error
    }
  };
}

function storeSearchResults(searchTerm, searchResults) {
  return {
    type: STORE_SEARCH_RESULTS,
    payload: {
      searchTerm,
      searchResults
    }
  };
}

/**
 * Searches the people endpoint for `searchTerm`
 *
 * @export
 * @param {string} searchTerm
 * @param {object} spark
 * @returns {function}
 */
export function searchForUser(searchTerm, spark) {
  return (dispatch) => {
    dispatch(storeSearchTerm(searchTerm));
    return spark.internal.search.people({query: searchTerm})
      .then((users) => dispatch(storeSearchResults(searchTerm, users)))
      .catch((error) => dispatch(doSearchError(error)));
  };
}
