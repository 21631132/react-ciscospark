import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {getDisplayName} from '@ciscospark/react-component-utils';

import SparkComponent from './component';

const propTypes = {
  accessToken: PropTypes.string.isRequired
};

export default function injectSpark(WrappedComponent, options = {}) {
  const {
    withRef = false
  } = options;

  class InjectSpark extends Component {
    shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    }

    render() {
      const {accessToken} = this.props;
      return (
        <div>
          {
            accessToken
            && <SparkComponent accessToken={accessToken} {...this.props} />
          }
          <WrappedComponent
            {...this.props}
            withRef={withRef}
          />
        </div>
      );
    }
  }

  InjectSpark.propTypes = propTypes;

  InjectSpark.displayName = `InjectSpark(${getDisplayName(WrappedComponent)})`;
  InjectSpark.WrappedComponent = WrappedComponent;

  return InjectSpark;
}
