import {compose, lifecycle} from 'recompose';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import {storeExternalCall} from '@ciscospark/redux-module-media';

import {storeMeetDetails} from '../actions';

import {destinationTypes} from '../';

export default compose(
  connect(
    (state) => state,
    (dispatch) => bindActionCreators({
      storeExternalCall,
      storeMeetDetails
    }, dispatch)
  ),
  lifecycle({
    componentWillMount() {
      const {props} = this;
      const {
        call,
        media
      } = props;

      if (call) {
        const details = {};
        details.callId = call.id;
        // Store call if it's not in the store
        if (!media.hasIn(['byId', details.callId])) {
          props.storeExternalCall(call);
        }
        if (call.locus && call.locus.conversationUrl) {
          details.toValue = call.locus.conversationUrl.split('/').pop();
          details.toType = destinationTypes.SPACEID;
          const {locusTags} = call.locus.info;
          if (locusTags && locusTags.includes('ONE_ON_ONE')) {
            const otherUser = call.memberships.filter((u) => call.me.personUuid !== u.personUuid)[0];
            details.toValue = otherUser.personUuid;
            details.toType = destinationTypes.USERID;
          }
        }
        props.storeMeetDetails(details);
      }
    }
  })
);
