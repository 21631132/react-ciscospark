import {compose, lifecycle} from 'recompose';
import {constructHydraId} from '@ciscospark/react-component-utils';

import {eventNames} from '../events';

export default compose(lifecycle({
  componentWillReceiveProps(nextProps) {
    // Only add listeners if this is a new call
    // TODO: Need to create a better way to hook into call cycle
    const {
      conversation,
      onEvent
    } = nextProps;

    function handleEvent({membership, name}) {
      const actorName = conversation.getIn(['participants'])
        .find((p) => p.get('id') === membership.personUuid).get('displayName');
      return onEvent(name, {
        actorId: membership.personId,
        roomId: constructHydraId('ROOM', conversation.get('id')),
        actorName
      });
    }

    if (
      (
        !this.props.call
          || !this.props.call.get('instance')
      )
        && (
          nextProps.call
          && nextProps.call.get('instance')
        )
        && typeof onEvent === 'function'
    ) {
      nextProps.call.get('instance')
        .on('membership:connected', (membership) => {
          handleEvent({
            name: eventNames.MEMBERSHIPS_CONNECTED,
            membership
          });
        })
        .on('membership:declined', (membership) => {
          handleEvent({
            name: eventNames.MEMBERSHIPS_DECLINED,
            membership
          });
        })
        .on('membership:disconnected', (membership) => {
          handleEvent({
            name: eventNames.MEMBERSHIPS_DISCONNECTED,
            membership
          });
        });
    }
  }
}));

