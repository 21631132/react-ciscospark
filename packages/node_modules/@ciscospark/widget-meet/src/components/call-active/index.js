import React from 'react';
import PropTypes from 'prop-types';
import Draggable from 'react-draggable';
import classNames from 'classnames';
import ButtonControls from '@ciscospark/react-component-button-controls';
import Video from '@ciscospark/react-component-video';
import Audio from '@ciscospark/react-component-audio';
import Avatar from '@ciscospark/react-component-avatar';
import {
  ICON_TYPE_VIDEO_CROSS_OUTLINE,
  ICON_TYPE_MUTE_OUTLINE,
  ICON_TYPE_EXIT
} from '@ciscospark/react-component-icon';

import styles from './styles.css';

const propTypes = {
  avatarImage: PropTypes.string,
  callState: PropTypes.object.isRequired,
  displayName: PropTypes.string,
  localMediaStream: PropTypes.object,
  localVideoPosition: PropTypes.object,
  onHangupClick: PropTypes.func.isRequired,
  onLocalVideoDragStop: PropTypes.func,
  onStartSendingAudio: PropTypes.func.isRequired,
  onStartSendingVideo: PropTypes.func.isRequired,
  onStopSendingAudio: PropTypes.func.isRequired,
  onStopSendingVideo: PropTypes.func.isRequired,
  remoteAudioStream: PropTypes.object,
  remoteMediaStream: PropTypes.object,
  remoteVideoStream: PropTypes.object
};

const defaultProps = {
  avatarImage: '',
  displayName: '',
  localMediaStream: {},
  localVideoPosition: {x: 0, y: 0},
  onLocalVideoDragStop: () => {},
  remoteAudioStream: null,
  remoteMediaStream: null,
  remoteVideoStream: null
};

function ActiveCall({
  callState,
  localVideoPosition,
  onHangupClick,
  onLocalVideoDragStop,
  onStartSendingAudio,
  onStartSendingVideo,
  onStopSendingAudio,
  onStopSendingVideo,
  localMediaStream,
  remoteAudioStream,
  remoteMediaStream,
  remoteVideoStream,
  avatarImage,
  displayName
}) {
  const connectedClass = remoteMediaStream && remoteMediaStream.active && styles.callConnected;
  const {
    sendingAudio,
    sendingVideo,
    connected
  } = callState;

  const buttons = [
    {
      accessibilityLabel: 'Mute Audio',
      iconType: ICON_TYPE_MUTE_OUTLINE,
      buttonClassName: classNames(styles.audioButton, sendingAudio === false && connected
        ? styles.audioStartSending : styles.audioStopSending),
      onClick: sendingAudio ? onStopSendingAudio : onStartSendingAudio
    },
    {
      accessibilityLabel: 'Mute Video',
      iconType: ICON_TYPE_VIDEO_CROSS_OUTLINE,
      buttonClassName: classNames(styles.videoButton, sendingVideo === false && connected
        ? styles.videoStartSending : styles.videoStopSending),
      onClick: sendingVideo ? onStopSendingVideo : onStartSendingVideo
    },
    {
      accessibilityLabel: 'Hangup',
      iconType: ICON_TYPE_EXIT,
      buttonClassName: styles.hangupButton,
      onClick: onHangupClick
    }
  ];

  let remoteAudio, remoteVideo;
  if (remoteMediaStream && remoteMediaStream.active) {
    remoteAudio = <Audio srcObject={remoteAudioStream} />;
    remoteVideo = <Video srcObject={remoteVideoStream} />;
    if (callState.remoteVideoMuted) {
      remoteVideo = ( // eslint-disable-line no-extra-parens
        <div className={classNames(styles.avatarView, 'remote-avatar-view')}>
          <Avatar image={avatarImage} name={displayName} />
        </div>
      );
    }
  }

  return (
    <div className={classNames(styles.callContainer, connectedClass, 'call-container')}>
      { callState.activeParticipantsCount > 1 &&
        <div className={classNames(styles.remoteVideo, 'remote-video')}>
          { remoteVideo }
          { remoteAudio }
        </div>
      }
      {
        callState.activeParticipantsCount < 2 &&
        <div className={classNames(styles.waiting, 'participants-waiting')}>Waiting for others to join...</div>
      }
      {
        localMediaStream && localMediaStream.active && (sendingVideo || sendingAudio) &&
        <Draggable
          bounds="parent"
          defaultClassNameDragging={styles.reactDraggableDragging}
          onStop={onLocalVideoDragStop}
          position={localVideoPosition}
        >
          <div className={classNames(styles.localVideo, 'local-video')}>
            <Video audioMuted srcObject={localMediaStream} />
          </div>
        </Draggable>
      }
      {
        localMediaStream && localMediaStream.active &&
        <div className={classNames(styles.callControls, 'call-controls')}>
          <ButtonControls buttons={buttons} showLabels={false} />
        </div>
      }
    </div>
  );
}

ActiveCall.propTypes = propTypes;
ActiveCall.defaultProps = defaultProps;

export default ActiveCall;
