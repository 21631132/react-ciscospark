import React, {PropTypes} from 'react';
import classNames from 'classnames';

import ButtonControls from '@ciscospark/react-component-button-controls';
import {ICON_TYPE_VIDEO_OUTLINE, ICON_TYPE_EXIT} from '@ciscospark/react-component-icon';
import Video from '@ciscospark/react-component-video';
import Avatar from '@ciscospark/react-component-avatar';

import styles from './styles.css';

// eslint-disable-next-line complexity
export default function ActiveCall({
  callState,
  onHangupClick,
  onStartSendingAudio,
  onStartSendingVideo,
  onStopSendingAudio,
  onStopSendingVideo,
  localMediaStreamUrl,
  remoteMediaStreamUrl,
  toPersonAvatar
}) {
  const connectedClass = remoteMediaStreamUrl && styles.callConnected;
  const {
    sendingAudio,
    sendingVideo
  } = callState;

  const buttons = [
    {
      iconType: sendingAudio ? ICON_TYPE_VIDEO_OUTLINE : ``,
      buttonClassName: classNames(styles.audioButton, sendingAudio ? styles.audioStartSending : styles.audioStopSending),
      onClick: sendingAudio ? onStopSendingAudio : onStartSendingAudio
    },
    {
      iconType: sendingVideo ? ICON_TYPE_VIDEO_OUTLINE : ``,
      buttonClassName: classNames(styles.videoButton, sendingVideo ? styles.videoStartSending : styles.videoStopSending),
      onClick: sendingVideo ? onStopSendingVideo : onStartSendingVideo
    },
    {
      iconType: ICON_TYPE_EXIT,
      buttonClassName: styles.hangupButton,
      onClick: onHangupClick
    }
  ];

  let remoteView = ( // eslint-disable-line no-extra-parens
    <div className={classNames(styles.avatarView, `remote-avatar-view`)}>
      <Avatar image={toPersonAvatar} />
    </div>
  );

  if (remoteMediaStreamUrl && callState.receivingVideo) {
    remoteView = <Video src={remoteMediaStreamUrl} />;
  }

  return (
    <div className={classNames(styles.callContainer, connectedClass, `call-container`)}>
      <div className={classNames(styles.remoteVideo, `remote-video`)}>
        { remoteView }
      </div>
      {
        localMediaStreamUrl &&
        <div className={classNames(styles.localVideo, `local-video`)}>
          <Video audio={false} src={localMediaStreamUrl} />
        </div>
      }
      <div className={classNames(styles.callControls, `call-controls`)}>
        <ButtonControls buttons={buttons} />
      </div>
    </div>
  );
}

ActiveCall.propTypes = {
  callState: PropTypes.object,
  localMediaStreamUrl: PropTypes.string,
  onHangupClick: PropTypes.func.isRequired,
  onStartSendingAudio: PropTypes.func.isRequired,
  onStartSendingVideo: PropTypes.func.isRequired,
  onStopSendingAudio: PropTypes.func.isRequired,
  onStopSendingVideo: PropTypes.func.isRequired,
  remoteMediaStreamUrl: PropTypes.string,
  toPersonAvatar: PropTypes.object
};
