import React, {PropTypes, Component} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import Video from '@ciscospark/react-component-video';
import {
  callUser
} from '@ciscospark/redux-module-media';

export class MeetWidget extends Component {
  componentDidMount() {
    const props = this.props;
    const {
      shouldStartMeeting,
      toPersonId,
      spark,
      media
    } = props;
    if (shouldStartMeeting
      && !media.getIn([`status`, `isCalling`])
      && !media.getIn([`status`, `isConnected`])) {
      props.callUser({userId: toPersonId}, spark);
    }
  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  render() {
    const props = this.props;
    const {
      remoteMediaStreamUrl
    } = props;
    if (remoteMediaStreamUrl) {
      return (
        <Video src={remoteMediaStreamUrl} />
      );
    }
    return <div />;
  }
}

MeetWidget.propTypes = {
  shouldStartMeeting: PropTypes.bool,
  spark: PropTypes.object.isRequired,
  toPersonId: PropTypes.string.isRequired
};

function mapStateToProps(state, ownProps) {
  return {
    spark: ownProps.spark || state.spark,
    media: state.media,
    remoteMediaStreamUrl: state.media.getIn([`mediaState`, `remoteMediaStreamUrl`])
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    callUser
  }, dispatch)
)(MeetWidget);
