import React, {PropTypes, Component} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import classNames from 'classnames';
import autobind from 'autobind-decorator';
import {intlShape, injectIntl} from 'react-intl';

import {
  callUser,
  hangupCall
} from '@ciscospark/redux-module-media';

import InactiveCall from './components/call-inactive';
import ActiveCall from './components/call-active';

import styles from './styles.css';

export class MeetWidget extends Component {

  componentDidMount() {
    const props = this.props;
    const {
      shouldStartMeeting
    } = this.props;
    const {
      media
    } = props;
    if (shouldStartMeeting
      && !media.getIn([`status`, `isDialing`])
      && !media.getIn([`status`, `isConnected`])) {
      this.handleCall();
    }
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;
    return nextProps.media !== props.media;
  }

  /**
   * Event handler in case one isn't provided
   * @param {string} name
   * @param {object} data
   * @returns {undfined}
   */
  @autobind
  handleEvent(name, data) {
    const {onEvent} = this.props;
    if (typeof onEvent === `function`) {
      this.props.onEvent(name, data);
    }
  }

  @autobind
  handleCall() {
    const props = this.props;
    const {
      toPersonId,
      spark
    } = this.props;
    props.callUser({userId: toPersonId}, spark);
  }

  @autobind
  handleHangup() {
    const props = this.props;
    const {
      media
    } = props;
    props.hangupCall(media.get(`call`));
  }

  @autobind
  handleStartSendingAudio() {
    this.props.media.get(`call`).startSendingAudio();
  }

  @autobind
  handleStartSendingVideo() {
    this.props.media.get(`call`).startSendingVideo();
  }

  @autobind
  handleStopSendingAudio() {
    this.props.media.get(`call`).stopSendingAudio();
  }

  @autobind
  handleStopSendingVideo() {
    this.props.media.get(`call`).stopSendingVideo();
  }

  render() {
    const {
      handleCall,
      handleHangup,
      handleStartSendingAudio,
      handleStartSendingVideo,
      handleStopSendingAudio,
      handleStopSendingVideo,
      props
    } = this;
    const {
      intl,
      toPersonAvatar,
      toPersonName
    } = this.props;
    const {
      media
    } = props;
    const callState = media.get(`callState`).toJS();
    const remoteUrl = media.getIn([`remoteStream`, `url`]);
    const localUrl = media.getIn([`localStream`, `url`]);
    const isConnected = media.getIn([`status`, `isConnected`]);
    const isActiveCall = media.getIn([`status`, `isDialing`]) || isConnected;

    return (
      <div className={classNames(styles.meetWidgetContainer, `meet-widget-container`)}>
        {
          !isActiveCall &&
          <InactiveCall
            intl={intl}
            onCallClick={handleCall}
            toPersonAvatar={toPersonAvatar}
            toPersonName={toPersonName}
          />
        }
        {
          isActiveCall &&
          <ActiveCall
            callState={callState}
            intl={intl}
            isConnected={isConnected}
            localMediaStreamUrl={localUrl}
            onHangupClick={handleHangup}
            onStartSendingAudio={handleStartSendingAudio}
            onStartSendingVideo={handleStartSendingVideo}
            onStopSendingAudio={handleStopSendingAudio}
            onStopSendingVideo={handleStopSendingVideo}
            remoteMediaStreamUrl={remoteUrl}
            toPersonAvatar={toPersonAvatar}
            toPersonName={toPersonName}
          />
        }
      </div>
    );
  }
}

const injectedPropTypes = {
  media: PropTypes.object
};

MeetWidget.propTypes = {
  intl: intlShape.isRequired,
  onEvent: PropTypes.func,
  shouldStartMeeting: PropTypes.bool,
  spark: PropTypes.object.isRequired,
  toPersonAvatar: PropTypes.string,
  toPersonId: PropTypes.string.isRequired,
  toPersonName: PropTypes.string.isRequired,
  ...injectedPropTypes
};

function mapStateToProps(state, ownProps) {
  return {
    spark: ownProps.spark || state.spark,
    media: state.media
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    callUser,
    hangupCall
  }, dispatch)
)(injectIntl(MeetWidget));
