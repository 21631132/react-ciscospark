import moment from 'moment';

const VISIBLE_ACTIVITY_VERBS = {
  tombstone: {},
  share: {
    objectTypes: ['content']
  },
  post: {
    objectTypes: ['comment']
  },
  create: {
    objectTypes: ['conversation']
  },
  update: {
    objectTypes: ['locusSessionSummaryParticipant', 'locusSessionSummary']
  },
  add: {
    objectTypes: ['person']
  },
  leave: {
    objectTypes: ['person']
  }
};

/**
 * Determines if an activity object is a visible activity
 * @param {object} activity
 * @returns {bool}
 */
export function isActivityVisible(activity) {
  if (!Object.prototype.hasOwnProperty.call(VISIBLE_ACTIVITY_VERBS, activity.verb)) {
    return false;
  }
  const verb = VISIBLE_ACTIVITY_VERBS[activity.verb];
  if (verb.objectTypes) {
    if (verb.objectTypes.indexOf(activity.object.objectType) === -1) {
      return false;
    }
  }
  return true;
}


export function getCallDataOneOnOne(everyBodyJoined, iDeclined, actorWasMe, partner) {
  let arg, status;
  if (everyBodyJoined) {
    status = 'youHadACall';
  }
  // One on One Call
  else if (iDeclined) {
    status = 'youCancelledACall';
  }
  else if (actorWasMe) {
    status = 'someoneWasUnavailable';
    arg = {name: partner.person.displayName};
  }
  else {
    status = 'youMissedACall';
  }
  return {arg, status};
}

function getCallDataGroup(iWasJoined, noBodyJoined, actorWasMe, activity) {
  let arg, status;
  if (iWasJoined && !noBodyJoined) {
    status = 'youHadAMeeting';
  }
  else if (noBodyJoined) {
    if (actorWasMe) {
      status = 'nobodyJoinedYourMeeting';
    }
    else {
      status = 'nobodyJoinedTheMeeting';
    }
    arg = {name: activity.actor.displayName};
  }
  else {
    status = 'youMissedAMeeting';
  }
  return {arg, status};
}


/**
 * Parses call data from an activity
 * @param {object} activity
 * @param {object} currentUser
 * @param {boolean} conversationIsOneOnOne
 * @returns {object}
 */
export function getCallData(activity, currentUser, conversationIsOneOnOne) {
  if (activity.object.objectType !== 'locusSessionSummary') {
    return null;
  }
  // Call/Meeting update parsing
  const callObject = activity.object;
  const partner = callObject.participants.items.find((p) => p.person.entryUUID !== currentUser.id);
  const me = callObject.participants.items.find((p) => p.person.entryUUID === currentUser.id);

  const iWasJoined = me && me.state === 'LEFT';
  const iDeclined = me && me.state === 'DECLINED';
  const everyBodyJoined = callObject.participants.items.every((p) => p.state === 'LEFT');

  const callees = callObject.participants.items.filter((p) => !p.isInitiator);
  const noBodyJoined = callees.every((p) => p.state !== 'LEFT');

  const actorWasMe = activity.actor.entryUUID === currentUser.id;

  const {arg, status} = conversationIsOneOnOne
    ? getCallDataOneOnOne(everyBodyJoined, iDeclined, actorWasMe, partner)
    : getCallDataGroup(iWasJoined, noBodyJoined, actorWasMe, activity);

  // Duration
  const duration = moment.duration((callObject.duration || 0) * 1000).humanize();

  return {
    callInfo: {
      duration,
      ...arg
    },
    status
  };
}
