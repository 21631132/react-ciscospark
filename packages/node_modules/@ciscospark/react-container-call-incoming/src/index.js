import {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';

import {
  callIncoming,
  listeningForIncomingCalls,
  removeCallIncoming
} from '@ciscospark/redux-module-media';

export class IncomingCall extends Component {
  componentDidMount() {
    const {media, spark} = this.props;
    if (media.getIn([`status`, `isListening`])) {
      return;
    }
    spark.phone.on(`call:incoming`, (incomingCall) => {
      if (!this.shouldAcknowledgeCall(incomingCall)) {
        return;
      }
      incomingCall.acknowledge()
        .then(() => this.props.callIncoming(incomingCall));
      const removeIncoming = () => this.props.removeCallIncoming(incomingCall);
      // Disconnects will happen if the remote party hangs up before we accept/decline
      incomingCall.once(`disconnected`, removeIncoming);
      // Once we are connected, our connected call state will handle disconnects
      incomingCall.once(`connected`, () => incomingCall.off(`disconnected`, removeIncoming));
    });
    this.props.listeningForIncomingCalls();
  }

  shouldComponentUpdate(nextProps) {
    return nextProps.conversation !== this.props.conversation;
  }

  shouldAcknowledgeCall(incomingCall) {
    const {media, conversation} = this.props;

    // We only acknowledge calls directly related to this widget
    if (incomingCall.locus.url !== conversation.locusUrl) {
      return false;
    }
    // If we make an outbound call via the widget, when the remote party answers,
    // we get a call:incoming notification when they connect
    if (media.getIn([`status`, `isRinging`])) {
      return false;
    }
    return true;
  }

  render() {
    return null;
  }
}

function mapStateToProps(state) {
  return {
    conversation: state.conversation,
    media: state.media,
    spark: state.spark.get(`spark`)
  };
}

const injectedPropTypes = {
  conversation: PropTypes.object,
  media: PropTypes.object,
  spark: PropTypes.object,
  callIncoming: PropTypes.func,
  listeningForIncomingCalls: PropTypes.func,
  removeCallIncoming: PropTypes.func
};

IncomingCall.propTypes = {
  ...injectedPropTypes
};

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    callIncoming,
    removeCallIncoming,
    listeningForIncomingCalls
  }, dispatch)
)(IncomingCall);
