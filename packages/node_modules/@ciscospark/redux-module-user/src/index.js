import {Map} from 'immutable';

export const initialState = new Map({
  currentUser: {},
  status: new Map({
    isFetchingCurrentUser: false
  })
});

export const GET_CURRENT_USER = `GET_CURRENT_USER`;
export const GET_CURRENT_USER_BEGIN = `GET_CURRENT_USER_BEGIN`;

export default function reducer(state = initialState, action) {
  switch (action.type) {
  case GET_CURRENT_USER:
    return state.setIn([`status`, `isFetchingCurrentUser`], action.payload.isFetching)
      .set(`currentUser`, action.payload.user);
  case GET_CURRENT_USER_BEGIN:
    return state.setIn([`status`, `isFetchingCurrentUser`], action.payload.isFetching);
  default:
    return state;
  }
}

export function getCurrentUser(user) {
  return {
    type: GET_CURRENT_USER,
    payload: {
      isFetching: false,
      user
    }
  };
}

export function getCurrentUserBegin() {
  return {
    type: GET_CURRENT_USER_BEGIN,
    payload: {
      isFetching: true
    }
  };
}

export function fetchCurrentUser(spark) {
  return (dispatch) => {
    dispatch(getCurrentUserBegin());
    return spark.user.get()
      .then((user) => {
        dispatch(getCurrentUser(user));
      });
  };
}
