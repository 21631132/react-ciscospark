import {fromJS} from 'immutable';

import {
  ADD_FLAG,
  STORE_FLAGS,
  REMOVE_FLAG,
  UPDATE_FLAG_STATUS
} from './actions';


export const initialState = fromJS({
  flags: {},
  error: null,
  status: {
    hasFetched: false,
    isFetching: false
  }
});

// eslint-disable-reason Reducer Reduction Strategy incoming...
// eslint-disable-next-line complexity
export default function reducer(state = initialState, action) {
  switch (action.type) {

  case ADD_FLAG: {
    const {flag, error} = action.payload;
    if (error) {
      return state.setIn([`flags`, flag.activityId], error);
    }
    return state.setIn([`flags`, flag.activityId], flag);
  }

  case STORE_FLAGS: {
    const {flag, error} = action.payload;
    if (error) {
      return state.setIn([`status`, `hasFetched`], true)
        .setIn([`status`, `isFetching`], false)
        .setIn(`error`, error);
    }
    return state.setIn([`status`, `hasFetched`], true)
      .setIn([`status`, `isFetching`], false)
      .setIn([`flags`, flag.activityId], flag);
  }

  case REMOVE_FLAG: {
    const {flag} = action.payload;
    let flags = [...state.flags];
    if (action.error) {
      // Unable to delete flag, add it back in
      flags.push(flag);
    }
    else {
      flags = state.flags.filter((existingFlag) => existingFlag.id !== flag.id);
    }
    return Object.assign({}, state, {
      flags: [...flags]
    });
  }
  case UPDATE_FLAG_STATUS: {
    return state.mergeDeepIn([`status`], action.payload.status);
  }

  default: {
    return state;
  }
  }
}
