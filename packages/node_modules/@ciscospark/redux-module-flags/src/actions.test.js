/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

import {initialState} from './reducer';
import * as actions from './actions';

let mockSpark, store;

const activity = {
  url: `https://testurl`
};

const flag = {
  id: 1,
  url: `https://testurl`
};

describe(`redux-module-flags actions `, () => {
  beforeEach(() => {
    mockSpark = {
      internal: {
        flag: {
          create: jest.fn(() => Promise.resolve()),
          list: jest.fn(() => Promise.resolve([
            {id: 1, url: `http://testurl1`},
            {id: 2, url: `http://testurl2`},
            {id: 3, url: `http://testurl3`}
          ])),
          delete: jest.fn(() => Promise.resolve())
        }
      }
    };
    store = mockStore(initialState);
  });

  it(`has exported actions`, () => {
    expect(actions.fetchFlags).toBeDefined();
    expect(actions.flagActivity).toBeDefined();
    expect(actions.removeFlagFromServer).toBeDefined();
  });

  describe(`#fetchFlags`, () => {

    it(`can successfully fetch Flags`, () =>
      store.dispatch(actions.fetchFlags(mockSpark))
        .then(() => {
          expect(mockSpark.internal.flag.list).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        })
    );

    it(`can error correctly`, () => {
      mockSpark.internal.flag.list = jest.fn(() => Promise.reject({}));
      return store.dispatch(actions.fetchFlags(mockSpark))
        .then(() => {
          expect(mockSpark.internal.flag.list).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

  });

  describe(`#flagActivity`, () => {

    it(`can successfully flag an activity`, () =>
      store.dispatch(actions.flagActivity(activity, mockSpark))
        .then(() => {
          expect(mockSpark.internal.flag.create).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        })
    );

    it(`can error correctly`, () => {
      mockSpark.internal.flag.create = jest.fn(() => Promise.reject({}));
      return store.dispatch(actions.flagActivity(activity, mockSpark))
        .then(() => {
          expect(mockSpark.internal.flag.create).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

  });

  describe(`#removeFlagFromServer`, () => {

    it(`can successfully remove flag`, () =>
      store.dispatch(actions.removeFlagFromServer(flag, mockSpark))
        .then(() => {
          expect(mockSpark.internal.flag.delete).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        })
    );

    it(`can error correctly`, () => {
      mockSpark.internal.flag.delete = jest.fn(() => Promise.reject({}));
      return store.dispatch(actions.removeFlagFromServer(flag, mockSpark))
        .then(() => {
          expect(mockSpark.internal.flag.delete).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

  });


});
