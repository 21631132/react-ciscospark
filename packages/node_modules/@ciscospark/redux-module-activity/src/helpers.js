import marked from 'marked';
import {filterSync} from '@ciscospark/helper-html';

import {resetActivity} from './actions';

/**
 * Create objectURL
 *
 * @param {object} file
 * @returns {string}
 */
export function createObjectURL(file) {
  const urlCreator = window.URL || window.webkitURL;
  return urlCreator.createObjectURL(file);
}

/**
 * Revoke objectURL
 *
 * @param {object} file
 * @returns {undefined}
 */
export function revokeObjectURL(file) {
  const urlCreator = window.URL || window.webkitURL;
  urlCreator.revokeObjectURL(file);
}


/**
 * Parses react-mention data from input text
 *
 * @param {any} text
 * @returns {Object}
 * @returns {Object.mentions}
 * @returns {Object.mentionsText}
 */

export function getMentions(text) {
  const regex = /@\{(.+?)\}\|([a-zA-Z0-9-]+)\|/g;
  const mentions = [];
  const mentionsText = text.replace(regex, (match, display, id) => {
    mentions.push({
      id,
      objectType: 'person'
    });
    return `<spark-mention data-object-type="person" data-object-id="${id}">${display}</spark-mention>`;
  });
  return {
    mentions,
    mentionsText
  };
}

export function filterMarked(content) {
  return filterSync(() => {}, { // eslint-disable-line no-empty-function
    'spark-mention': ['data-object-type', 'data-object-id', 'data-object-url'],
    a: ['href'],
    b: [],
    blockquote: ['class'],
    strong: [],
    i: [],
    em: [],
    pre: [],
    code: ['class'],
    br: [],
    hr: [],
    p: [],
    ul: [],
    ol: [],
    li: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: []
  }, [], content);
}

/**
 * Creates markdown and stripped text object
 *
 * @param {string} text
 * @param {string} cleanText
 * @returns {object}
 * @returns {object.content} Converted markdown content
 * @returns {object.displayName} Raw text content
 */
export function createMessageObject(text, cleanText) {
  const messageObject = {
    displayName: '',
    objectType: 'comment'
  };
  if (typeof text === 'string') {
    const origContent = text.trim();
    let content = origContent;
    messageObject.displayName = cleanText || origContent;

    const markedString = marked(content, {sanitize: true}) || '';
    if (markedString !== content) {
      // Remove possibly added <p></p> tags and newline
      const cleanedString = markedString.replace(/(?:^<p>)|(?:<\/p>$)|(?:<\/p>\n$)/g, '').trim();
      content = filterMarked(cleanedString);
    }

    const {mentions, mentionsText} = getMentions(content);
    if (mentions && mentions.length) {
      messageObject.mentions = {
        items: mentions
      };
      content = mentionsText;
    }

    messageObject.content = content;
  }
  return messageObject;
}

/**
* Helper to reset Activity store
*
* @param {Map} activity
* @param {function} dispatch
* @returns {function}
*/
export function cleanupAfterSubmit(activity, dispatch) {
  const files = activity.get('files');
  if (files.size) {
    files.forEach((file) => {
      revokeObjectURL(file);
    });
  }
  dispatch(resetActivity());
}
