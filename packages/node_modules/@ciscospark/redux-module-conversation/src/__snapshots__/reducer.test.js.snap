// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`redux module conversation reducer should handle ACKNOWLEDGE_ACTIVITY 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
  },
  id: null,
  lastAcknowledgedActivityId: "abc-123",
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
}
`;

exports[`redux module conversation reducer should handle ADD_ACTIVITIES_TO_CONVERSATION 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
    http://activity.url/abc-123: Object {
      "id": "abc-123",
      "mock": true,
      "published": 1505420755171,
      "url": "http://activity.url/abc-123",
    },
  },
  id: null,
  lastAcknowledgedActivityId: null,
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
}
`;

exports[`redux module conversation reducer should handle CREATE_CONVERSATION 1`] = `
Immutable.Map {
  participants: Immutable.List [
    Immutable.Map {
      entryEmail: "steve.tester@gmail.com",
      displayName: "Steve Tester",
      entryUUID: "mock-person-1",
      roomProperties: Immutable.Map {
        lastAckTime: "1498660470979",
        lastAckDate: "2017-06-28T14:34:30.979Z",
        lastSeenActivityUUID: "e51add10-5c0e-11e7-81f3-bf0ed55d8b4a",
        lastSeenActivityDate: "2017-06-28T14:34:30.113Z",
        isModerator: false,
      },
      emailAddress: "steve.tester@gmail.com",
      objectType: "person",
      type: "PERSON",
      id: "mock-person-1",
      orgId: "consumer",
    },
    Immutable.Map {
      entryEmail: "john.tester@gmail.com",
      displayName: "John Tester",
      entryUUID: "mock-person-2",
      roomProperties: Immutable.Map {
        lastAckTime: "1505419760598",
        lastAckDate: "2017-09-14T20:09:20.598Z",
        isModerator: true,
        lastSeenActivityUUID: "277197c0-9987-11e7-a3f8-f164486cb97d",
        lastSeenActivityDate: "2017-09-14T19:59:01.948Z",
      },
      emailAddress: "john.tester@gmail.com",
      objectType: "person",
      type: "PERSON",
      id: "mock-person-2",
      orgId: "consumer",
    },
  ],
  defaultActivityEncryptionKeyUrl: undefined,
  lastReadableActivityDate: "2017-09-14T19:59:01.948Z",
  lastAcknowledgedActivityId: null,
  displayName: "Mock Conversation",
  activities: Immutable.OrderedMap {
    https://conv-a.wbx2.com/conversation/api/v1/activities/mock-activity-1: Object {
      "actor": Object {
        "id": "mock-person-2",
        "objectType": "person",
      },
      "id": "mock-activity-1",
      "object": Object {
        "displayName": "123",
        "objectType": "comment",
      },
      "objectType": "activity",
      "published": "2017-05-02T20:20:23.489Z",
      "target": Object {
        "activities": Object {
          "items": Array [],
        },
        "id": "mock-conversation-id",
        "objectType": "conversation",
        "participants": Object {
          "items": Array [],
        },
        "tags": Array [],
        "url": "https://conv-a.wbx2.com/conversation/api/v1/conversations/mock-conversation-id",
      },
      "url": "https://conv-a.wbx2.com/conversation/api/v1/activities/mock-activity-1",
      "verb": "post",
    },
    https://conv-a.wbx2.com/conversation/api/v1/activities/mock-activity-2: Object {
      "actor": Object {
        "id": "mock-person-1",
        "objectType": "person",
      },
      "id": "mock-activity-2",
      "object": Object {
        "displayName": "11",
        "objectType": "comment",
      },
      "objectType": "activity",
      "published": "2017-05-02T20:21:11.330Z",
      "target": Object {
        "activities": Object {
          "items": Array [],
        },
        "id": "mock-conversation-id",
        "objectType": "conversation",
        "participants": Object {
          "items": Array [],
        },
        "tags": Array [],
        "url": "https://conv-a.wbx2.com/conversation/api/v1/conversations/mock-conversation-id",
      },
      "url": "https://conv-a.wbx2.com/conversation/api/v1/activities/mock-activity-2",
      "verb": "post",
    },
  },
  published: "2017-02-22T17:11:56.887Z",
  url: "https://conv-a.wbx2.com/conversation/api/v1/conversations/mock-conversation-id",
  kmsResourceObjectUrl: undefined,
  locusUrl: undefined,
  status: Immutable.Map {
    isFetching: false,
    isLoaded: true,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
  tags: Immutable.List [
    "LOCKED",
    "MODERATOR",
  ],
  avatar: undefined,
  id: "mock-conversation-id",
}
`;

exports[`redux module conversation reducer should handle CREATE_CONVERSATION_BEGIN 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
  },
  id: null,
  lastAcknowledgedActivityId: null,
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: true,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
}
`;

exports[`redux module conversation reducer should handle RECEIVE_MERCURY_ACTIVITY 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
    delete-me: Object {
      "id": "delete-me",
      "mock": true,
      "verb": "tombstone",
    },
  },
  id: null,
  lastAcknowledgedActivityId: null,
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
}
`;

exports[`redux module conversation reducer should handle RECEIVE_MERCURY_COMMENT 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
    abc-123: Object {
      "id": "abc-123",
      "mock": true,
      "url": "abc-123",
    },
  },
  id: null,
  lastAcknowledgedActivityId: null,
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
}
`;

exports[`redux module conversation reducer should handle UPDATE_CONVERSATION_STATE 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
  },
  id: null,
  lastAcknowledgedActivityId: null,
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: true,
    isListeningToMercury: false,
    error: null,
  },
}
`;

exports[`redux module conversation reducer should return initial state 1`] = `
Immutable.Map {
  activities: Immutable.OrderedMap {
  },
  id: null,
  lastAcknowledgedActivityId: null,
  participants: Immutable.List [
  ],
  status: Immutable.Map {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToMercury: false,
    error: null,
  },
}
`;
