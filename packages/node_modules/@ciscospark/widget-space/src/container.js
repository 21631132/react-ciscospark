import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {autobind} from 'core-decorators';
import {compose} from 'recompose';

import {events as metricEvents} from '@ciscospark/react-redux-spark-metrics';
import TitleBar from '@ciscospark/react-component-title-bar';
import Button from '@ciscospark/react-component-button';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import Timer from '@ciscospark/react-component-timer';
import ErrorDisplay from '@ciscospark/react-component-error-display';


import {fetchCurrentUser} from '@ciscospark/redux-module-user';
import {fetchAvatar} from '@ciscospark/redux-module-avatar';

import {
  ICON_TYPE_WAFFLE
} from '@ciscospark/react-component-icon';

import ActivityMenu from './components/activity-menu';

import {
  getSpaceDetails,
  updateActivityType,
  updateSecondaryActivityType,
  storeActivityTypes,
  storeToPerson,
  storeSpaceDetails,
  toggleActivityMenuVisible
} from './actions';
import messages from './messages';
import {getSpaceWidgetProps} from './selector';
import styles from './styles.css';

import enhancers from './enhancers';
import {propTypes as activityMenuPropTypes} from './enhancers/activity-menu';


const injectedPropTypes = {
  activityTypes: PropTypes.array.isRequired,
  call: PropTypes.object,
  conversation: PropTypes.object.isRequired,
  errors: PropTypes.object.isRequired,
  media: PropTypes.object.isRequired,
  sparkInstance: PropTypes.object,
  user: PropTypes.object.isRequired,
  widgetSpace: PropTypes.object.isRequired,
  fetchAvatar: PropTypes.func.isRequired,
  getSpaceDetails: PropTypes.func.isRequired,
  storeActivityTypes: PropTypes.func.isRequired,
  storeSpaceDetails: PropTypes.func.isRequired,
  toggleActivityMenuVisible: PropTypes.func.isRequired,
  updateActivityType: PropTypes.func.isRequired,
  updateSecondaryActivityType: PropTypes.func.isRequired
};

export const ownPropTypes = {
  customActivityTypes: PropTypes.object,
  muteNotifications: PropTypes.bool,
  spaceId: PropTypes.string,
  startCall: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.bool
  ]),
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string,
  ...activityMenuPropTypes,
  ...injectedPropTypes
};

const defaultProps = {
  customActivityTypes: undefined,
  muteNotifications: false,
  spaceId: '',
  startCall: false,
  toPersonEmail: '',
  toPersonId: ''
};

export class SpaceWidget extends Component {
  @autobind
  static setup(props) {
    const {
      conversation,
      errors,
      spaceId,
      sparkInstance,
      sparkState,
      toPersonEmail,
      toPersonId,
      metrics,
      user,
      spaceDetails,
      widgetStatus
    } = props;

    if (sparkInstance
      && sparkState.get('authenticated')
      && sparkState.get('registered')
      && !sparkState.get('hasError')) {
      // Get current user details
      if (!user.getIn(['status', 'isFetchingCurrentUser']) && !user.get('currentUser')) {
        props.fetchCurrentUser(sparkInstance);
      }
      if (!widgetStatus.get('isFetchingSpaceDetails') && !errors.get('hasError') && !spaceDetails) {
        if (spaceId) {
          props.getSpaceDetails(sparkInstance, spaceId, props.intl);
        }
        // Hack until we find a way to get a one-on-one space's details before loading conversation
        else if (toPersonEmail || toPersonId) {
          props.storeSpaceDetails({
            type: 'direct'
          });
        }
      }

      if (conversation.get('id')) {
        metrics.sendEndMetric(metricEvents.WIDGET_LOAD);
        props.fetchAvatar({space: conversation.toJS()}, sparkInstance);
      }
    }
  }

  constructor(props) {
    super(props);

    if (props.toPersonEmail || props.toPersonId) {
      props.storeToPerson(props.toPersonEmail || props.toPersonId);
    }
  }

  componentWillMount() {
    SpaceWidget.setup(this.props);
  }

  componentWillReceiveProps(nextProps) {
    const {
      call
    } = nextProps;
    SpaceWidget.setup(nextProps);
    const {props} = this;
    const prevCall = props.call;
    // Switch to Meet if ringing
    if (call && !prevCall) {
      nextProps.updateActivityType('meet');
    }

    // Reset back to message view after call ends
    if (prevCall && !call) {
      nextProps.updateActivityType('message');
    }
  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  render() {
    const {props} = this;
    const {
      activityTypes,
      conversation,
      media,
      sparkInstance,
      spaceDetails,
      errors,
      widgetSpace,
      widgetStatus
    } = props;

    const {formatMessage} = props.intl;
    let errorElement;
    if (errors.get('hasError') || conversation.getIn(['status', 'error'])) {
      let widgetError = errors.get('errors').first();
      if (!widgetError) {
        widgetError = {
          displaySubtitle: conversation.getIn(['status', 'error', 'description']),
          temporary: false,
          title: formatMessage(messages.errorConversation)
        };
      }
      errorElement = (
        <div className={classNames('ciscospark-error-wrapper', styles.errorWrapper)}>
          <ErrorDisplay
            secondaryTitle={widgetError.displaySubtitle}
            title={widgetError.displayTitle}
            transparent={widgetError.temporary}
            {...widgetError}
          />
        </div>
      );
    }
    if (sparkInstance && spaceDetails) {
      // Construct widgets
      const primaryActivityType = widgetSpace.get('primaryActivityType');
      const secondaryActivityType = widgetSpace.get('secondaryActivityType');
      const widgets = props.constructActivityWidgets(activityTypes, primaryActivityType);
      const secondaryWidget = props.constructSecondaryActivityWidget(activityTypes, secondaryActivityType);
      const spaceTitle = spaceDetails.get('title') || 'Loading...';
      const avatarId = spaceDetails.get('avatarId');
      const callStartTime = media.get('callStartTime');
      return (
        <div className={classNames('ciscospark-space-widget', styles.spaceWidget)}>
          { errorElement }
          {
            widgetStatus.get('activityMenuVisible') &&
            <div className={classNames('ciscospark-activity-menu-wrapper', styles.activityMenuWrapper)}>
              <ActivityMenu
                activityTypes={activityTypes}
                onChange={props.handleActivityChange}
                onExit={props.handleMenuClick}
                showExitButton
              />
            </div>
          }
          {
            secondaryWidget
          }
          <div className={classNames('ciscospark-title-bar-wrapper', styles.titleBarWrapper)}>
            <TitleBar avatarId={avatarId} name={spaceTitle}>
              {
                callStartTime &&
                <div className={classNames('ciscospark-title-bar-call-timer', styles.callTimer)}>
                  <Timer startTime={callStartTime} />
                </div>
              }
              <div className={classNames('ciscospark-activity-menu-button-wrapper', styles.activityMenuButtonWrapper)}>
                <div className={classNames('ciscospark-activity-menu-button', styles.activityMenuButton)}>
                  <Button accessibilityLabel="Main Menu" iconType={ICON_TYPE_WAFFLE} onClick={props.handleMenuClick} />
                </div>
              </div>
            </TitleBar>
          </div>
          <div className={classNames('ciscospark-widget-body', styles.widgetBody)}>
            {widgets}
          </div>
        </div>
      );
    }
    if (errors.get('hasError')) {
      return errorElement;
    }

    return <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />;
  }
}

SpaceWidget.propTypes = ownPropTypes;
SpaceWidget.defaultProps = defaultProps;


export default compose(
  connect(
    getSpaceWidgetProps,
    (dispatch) => bindActionCreators({
      getSpaceDetails,
      fetchAvatar,
      fetchCurrentUser,
      getSpaceWidgetProps,
      storeActivityTypes,
      storeSpaceDetails,
      storeToPerson,
      toggleActivityMenuVisible,
      updateActivityType,
      updateSecondaryActivityType
    }, dispatch)
  ),
  ...enhancers
)(SpaceWidget);
