import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import {fromJS} from 'immutable';
import classNames from 'classnames';
import autobind from 'autobind-decorator';

import TitleBar from '@ciscospark/react-component-title-bar';
import LoadingScreen from '@ciscospark/react-component-loading-screen';
import {
  ICON_TYPE_MESSAGE_OUTLINE,
  ICON_TYPE_VIDEO_OUTLINE
} from '@ciscospark/react-component-icon';
import {fetchCurrentUser} from '@ciscospark/redux-module-user';

import {
  getSpaceDetails,
  updateActivityType
} from './actions';
import messages from './messages';
import styles from './styles.css';

// Fixed default Activity Types
export const DEFAULT_ACTIVITY_TYPES = fromJS({
  message: {
    label: `Message`,
    buttonClassName: styles.messageButton,
    iconClassName: ICON_TYPE_MESSAGE_OUTLINE
  },
  meet: {
    label: `Meet`,
    buttonClassName: styles.meetButton,
    iconClassName: ICON_TYPE_VIDEO_OUTLINE
  }
});

const DEFAULT_ACTIVITY = `message`;

export class SpaceWidget extends Component {

  componentWillMount() {
    const props = this.props;
    const {
      activityTypes,
      initialActivity
    } = props;

    // Set initial activity type if valid choice
    if (activityTypes.has(initialActivity)) {
      props.updateActivityType(initialActivity);
    }
    else {
      props.updateActivityType(DEFAULT_ACTIVITY);
    }
    this.setup(props);
  }

  componentWillReceiveProps(nextProps) {
    const {
      media
    } = nextProps;
    this.setup(nextProps);

    // Switch to Meet if ringing
    if (media.getIn([`status`, `isRinging`])) {
      nextProps.updateActivityType(`meet`);
    }

    // Reset back to message view after call ends
    if (!media.getIn([`status`, `isConnected`]) && media.getIn([`status`, `isConnected`])) {
      this.updateActivityType(DEFAULT_ACTIVITY);
    }
  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  componentWillUnmount() {
    this.props.sparkInstance.mercury.disconnect().then(() => this.props.removeWidget());
  }

  @autobind
  setup(props) {
    const {
      spaceId,
      sparkInstance,
      sparkState,
      mercury,
      user,
      spaceDetails,
      widgetStatus
    } = props;

    if (sparkInstance && sparkState.authenticated) {
      // Get current user details
      if (!user.getIn([`status`, `isFetchingCurrentUser`]) && !user.get(`currentUser`)) {
        props.fetchCurrentUser(sparkInstance);
      }

      if (spaceId && !widgetStatus.fetchingSpaceDetails && !spaceDetails.id) {
        props.getSpaceDetails(sparkInstance, spaceId);
      }

      // Setup Web Sockets
      if (!mercury.getIn([`status`, `hasConnected`]) && sparkInstance.device.registered) {
        props.connectToMercury(sparkInstance);
      }
    }
  }

  render() {
    const {
      conversation,
      sparkInstance,
      spaceDetails,
      widgetSpace
    } = this.props;

    const {formatMessage} = this.props.intl;

    if (sparkInstance && spaceDetails) {
      return (
        <div className={classNames(`ciscospark-space-widget`)}>
          {widgetSpace}
        </div>
      );
    }

    return <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />;
  }
}

const injectedPropTypes = {
  conversation: PropTypes.object,
  media: PropTypes.object,
  mercury: PropTypes.object,
  sparkInstance: PropTypes.object,
  user: PropTypes.object,
  widgetSpace: PropTypes.object,
  getSpaceDetails: PropTypes.func,
  updateActivityType: PropTypes.func
};

export const ownPropTypes = {
  activityTypes: PropTypes.object,
  intialActivity: PropTypes.string,
  muteNotifications: PropTypes.bool,
  spaceId: PropTypes.string,
  startCall: PropTypes.bool,
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string
};

SpaceWidget.propTypes = {
  ...injectedPropTypes,
  ...ownPropTypes
};

SpaceWidget.defaultProps = {
  initialActivity: DEFAULT_ACTIVITY
};

function mapStateToProps(state) {
  const {
    activityTypes,
    spark,
    widgetSpace
  } = state;
  return {
    activityTypes: DEFAULT_ACTIVITY_TYPES.mergeDeep(activityTypes),
    sparkInstance: spark.get(`spark`),
    sparkState: spark.get(`status`).toJS(),
    spaceDetails: widgetSpace.get(`spaceDetails`).toJS(),
    widgetStatus: widgetSpace.get(`status`).toJS()
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    getSpaceDetails,
    fetchCurrentUser,
    updateActivityType
  }, dispatch)
)(SpaceWidget);
