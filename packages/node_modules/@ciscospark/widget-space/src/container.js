import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import autobind from 'autobind-decorator';

import {fetchCurrentUser} from '@ciscospark/redux-module-user';

import {updateActivityType} from './actions';
import styles from './styles.css';

export const ACTIVITY_TYPE = {
  MEET: `meet`,
  MESSAGE: `message`
};

export class SpaceWidget extends Component {

  componentWillMount() {
    const props = this.props;
    const {initialActivity} = props;

    if (initialActivity) {
      props.updateActivityType(initialActivity);
    }
    this.setup(props);
  }

  componentWillReceiveProps(nextProps) {
    this.setup(nextProps);
  }

  shouldComponentUpdate(nextProps) {
    return nextProps !== this.props;
  }

  @autobind
  setup(props) {
    const {
      media,
      sparkInstance,
      sparkState,
      spaceId,
      user
    } = props;

    const {
      authenticated,
      registered,
      connected
    } = sparkState;

    if (sparkInstance && authenticated) {
      // Get current user details
      if (!user.getIn([`status`, `isFetchingCurrentUser`]) && !user.get(`currentUser`)) {
        props.fetchCurrentUser(sparkInstance);
      }
      if (registered && connected) {
        // When incomming call occurs, switch to Meet
        if (!spaceId && media.getIn([`status`, `isRinging`])) {
          props.updateActivityType(ACTIVITY_TYPE.MEET);
        }
      }
    }
  }

  render() {
    const {
      conversation
    } = this.props;

    return (
      <div className={classNames(`ciscospark-space-widget`)}>
        <div className={classNames(`ciscospark-titlebar-wrapper`, styles.titleBarWrapper)}>
          <Titlebar
            name={displayName}
            image={spaceImage}
          />
        </div>
        <div className={classNames(`ciscospark-activity-list-wrapper`, styles.activityListWrapper)}>
          <ActivityList />
        </div>
        <div className={classNames(`ciscospark-message-composer-wrapper`, styles.messageComposerWrapper)}>
          <MessageComposer />
        </div>
      </div>
    );
  }
}

const injectedPropTypes = {
  conversation: PropTypes.object,
  media: PropTypes.object,
  sparkInstance: PropTypes.object,
  user: PropTypes.object,
  updateActivityType: PropTypes.func
};

export const ownPropTypes = {
  intialActivity: PropTypes.string,
  muteNotifications: PropTypes.bool,
  spaceId: PropTypes.string,
  startCall: PropTypes.bool,
  toPersonEmail: PropTypes.string,
  toPersonId: PropTypes.string
};

SpaceWidget.propTypes = {
  ...injectedPropTypes,
  ...ownPropTypes
};

SpaceWidget.defaultProps = {
  initialActivity: ACTIVITY_TYPE.MESSAGE
};

function mapStateToProps(state) {
  const {
    conversation,
    media,
    spark,
    user
  } = state;
  return {
    conversation,
    media,
    sparkInstance: spark.get(`spark`),
    sparkState: spark.get(`status`).toJS(),
    user
  };
}

export default connect(
  mapStateToProps,
  (dispatch) => bindActionCreators({
    fetchCurrentUser,
    updateActivityType
  }, dispatch)
)(SpaceWidget);
