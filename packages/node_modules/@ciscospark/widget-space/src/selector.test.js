import {fromJS, Map} from 'immutable';

import {CallRecord} from '@ciscospark/redux-module-media';

import {getCall} from './selector';

describe('widget-space selectors', () => {
  describe('#getCall selector', () => {
    const mockedConversation = fromJS({
      locusUrl: 'abc-123'
    });

    it('should get the call specified by the conversation locus url', () => {
      const mockedMedia = Map({
        byId: Map({
          'abc-123': CallRecord({
            id: 'abc-123'
          })
        })
      });
      const call = getCall.resultFunc(mockedConversation, mockedMedia);
      expect(call).toBeDefined();
    });

    it('should not get the call specified by the conversation locus url if dismissed', () => {
      const mockedMedia = Map({
        byId: Map({
          'abc-123': CallRecord({
            id: 'abc-123',
            isDismissed: true
          })
        })
      });
      const call = getCall.resultFunc(mockedConversation, mockedMedia);
      expect(call).not.toBeTruthy();
    });

    it('should return empty if there is no call for conversation locus url', () => {
      const mockedMedia = Map({
        byId: Map({
          'abc-1234': CallRecord({
            id: 'abc-1234'
          })
        })
      });
      const call = getCall.resultFunc(mockedConversation, mockedMedia);
      expect(call).not.toBeDefined();
    });
  });
});
