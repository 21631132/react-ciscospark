import {createSelector} from 'reselect';

import {validateAndDecodeId} from '@ciscospark/react-component-utils';

import {destinationTypes} from './';

const getWidget = (state) => state.widgetSpace;
const getSpark = (state) => state.spark;
const getMedia = (state) => state.media;
const getConversation = (state) => state.conversation;
const getFeatures = (state) => state.features;
const getUsers = (state) => state.users;
const getOwnProps = (state, ownProps) => ownProps;


// Injected by WithCurrentUser enhancer on widget base
const getCurrentUser = (state, ownProps) => ownProps.currentUser;

/**
 * Get the other user in a 1:1 conversation.
 * @param {conversation} conversation
 * @param {participant} currentUser
 * @returns {reselect.Selector}
 */
export const getToUser = createSelector(
  [getWidget, getUsers],
  (widget, users) => {
    const destination = widget.get('destination');
    if (destination) {
      let toUserId = null;
      if (destination.type === destinationTypes.EMAIL) {
        toUserId = users.getIn(['byEmail', destination.id]);
      }
      if (destination.type === destinationTypes.USERID) {
        toUserId = validateAndDecodeId(destination.id);
      }
      if (toUserId && toUserId !== 'PENDING') {
        return users.getIn(['byId', toUserId]);
      }
    }
    return null;
  }
);

export const getSpaceDetails = createSelector(
  [getWidget, getConversation, getCurrentUser, getToUser],
  (widget, conversation, currentUser, toUser) => {
    const spaceDetails = widget.get('spaceDetails');
    if (conversation.get('id') && currentUser) {
      let title = spaceDetails.get('title');
      let avatarId = conversation.get('id');
      // Grab avatar if we're in a direct conversation
      if (spaceDetails.get('type') === 'direct') {
        if (toUser) {
          title = toUser.get('displayName');
          avatarId = toUser.get('id');
        }
      }
      return widget.get('spaceDetails').merge({
        avatarId,
        title
      });
    }
    return spaceDetails;
  }
);

export const getActivityTypes = createSelector(
  [getWidget, getFeatures, getOwnProps],
  (widget, features, ownProps) => {
    const {spaceActivities} = ownProps;
    const spaceType = widget.getIn(['spaceDetails', 'type']);
    const filteredActivityTypes = [];
    let activityTypes = widget.get('activityTypes').toJS();
    if (spaceActivities) {
      activityTypes = activityTypes.filter((a) => spaceActivities[a.name] !== false);
    }
    activityTypes.forEach((activityType) => {
      let isValid = true;
      // Filter activity Type based on spaceType
      if (spaceType && !activityType.spaceTypes.includes(spaceType)) {
        isValid = false;
      }
      // Filter activity type based on feature requirement
      if (activityType.feature && !activityType.feature.hide && !features.getIn(['items', activityType.feature.key])) {
        isValid = false;
      }
      // Hide flag on feature means to hide activity if feature is enabled
      if (activityType.feature && activityType.feature.hide && features.getIn(['items', activityType.feature.key])) {
        isValid = false;
      }
      if (isValid) {
        filteredActivityTypes.push(activityType);
      }
    });
    return filteredActivityTypes;
  }
);

const getCall = createSelector(
  [getConversation, getMedia],
  (conversation, media) => {
    const call = media.getIn(['byId', conversation.get('locusUrl')]);
    if (call && call.isDismissed) {
      return null;
    }
    return call;
  }
);

export const getSpaceWidgetProps = createSelector(
  [getWidget, getSpark, getMedia, getSpaceDetails, getActivityTypes, getCall],
  (widget, spark, media, spaceDetails, activityTypes, call) => ({
    activityTypes,
    destination: widget.get('destination'),
    media,
    sparkInstance: spark.get('spark'),
    sparkState: spark.get('status'),
    spaceDetails,
    widgetStatus: widget.get('status'),
    call
  })
);
