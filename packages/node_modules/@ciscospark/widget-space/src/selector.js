import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetSpace;
const getSpark = (state) => state.spark;
const getConversation = (state) => state.conversation;

export const getSpaceDetails = createSelector(
  [getWidget, getConversation],
  (widget, conversation) => {
    const spaceDetails = widget.get(`spaceDetails`);
    if (conversation.get(`id`)) {
      return widget.get(`spaceDetails`).merge({
        avatar: conversation.get(`avatar`),
        title: conversation.get(`displayName`)
      });
    }
    return spaceDetails;
  }
);

export const getActivityTypes = createSelector(
  [getWidget],
  (widget) => {
    const spaceType = widget.getIn([`spaceDetails`, `type`]);
    const activityTypes = widget.get(`activityTypes`);
    // Filter activity Type based on spaceType
    if (spaceType) {
      return activityTypes.filter((a) => a && a.get(`spaceTypes`).includes(spaceType));
    }
    return activityTypes;
  }
)

export const getSpaceWidgetProps = createSelector(
  [getWidget, getSpark, getSpaceDetails, getActivityTypes],
  (widget, spark, spaceDetails, activityTypes) => ({
    activityTypes,
    sparkInstance: spark.get(`spark`),
    sparkState: spark.get(`status`),
    spaceDetails,
    widgetStatus: widget.get(`status`)
  })
);

