import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetSpace;
const getSpark = (state) => state.spark;
const getMedia = (state) => state.media;
const getConversation = (state) => state.conversation;
const getUsers = (state) => state.users;
const getCurrentUser = (state, ownProps) => ownProps.currentUsers;
const getFeatures = (state) => state.features;
const getOwnProps = (state, ownProps) => ownProps;

export const getSpaceDetails = createSelector(
  [getWidget, getConversation, getUsers, getCurrentUser],
  (widget, conversation, users, currentUser) => {
    const spaceDetails = widget.get('spaceDetails');
    if (conversation.get('id') && currentUser) {
      let title = spaceDetails.get('title');
      let avatarId = conversation.get('id');
      let toUser;
      // Grab avatar if we're in a direct conversation
      if (spaceDetails.get('type') === 'direct') {
        toUser = conversation.get('participants')
          .filter((p) => p.get('emailAddress') !== currentUser.email).first();
        if (toUser) {
          title = toUser.get('displayName');
          avatarId = toUser.get('id');
        }
      }
      const toPerson = toUser ? toUser.get('id') : widget.get('toPerson');

      return widget.get('spaceDetails').merge({
        avatarId,
        title,
        toPerson
      });
    }
    return spaceDetails;
  }
);

export const getActivityTypes = createSelector(
  [getWidget, getFeatures],
  (widget, features) => {
    const spaceType = widget.getIn(['spaceDetails', 'type']);
    const activityTypes = widget.get('activityTypes').toJS();
    const filteredActivityTypes = [];
    activityTypes.forEach((activityType) => {
      let isValid = true;
      // Filter activity Type based on spaceType
      if (spaceType && !activityType.spaceTypes.includes(spaceType)) {
        isValid = false;
      }
      // Filter activity type based on feature requirement
      if (activityType.feature && !activityType.feature.hide && !features.getIn(['items', activityType.feature.key])) {
        isValid = false;
      }
      // Hide flag on feature means to hide activity if feature is enabled
      if (activityType.feature && activityType.feature.hide && features.getIn(['items', activityType.feature.key])) {
        isValid = false;
      }
      if (isValid) {
        filteredActivityTypes.push(activityType);
      }
    });
    return filteredActivityTypes;
  }
);

const getCall = createSelector(
  [getConversation, getMedia],
  (conversation, media) => media.getIn(['calls', conversation.get('locusUrl')])
);


export const getSpaceWidgetProps = createSelector(
  [getWidget, getSpark, getMedia, getSpaceDetails, getActivityTypes, getCall, getOwnProps],
  (widget, spark, media, spaceDetails, activityTypes, call, ownProps) => ({
    activityTypes,
    media,
    sparkInstance: spark.get('spark'),
    sparkState: spark.get('status'),
    spaceDetails,
    widgetStatus: widget.get('status'),
    call,
    to: call || ownProps.spaceId || ownProps.toPersonId || ownProps.toPersonEmail
  })
);
