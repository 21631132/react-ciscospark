import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetSpace;
const getSpark = (state) => state.spark;
const getMedia = (state) => state.media;
const getConversation = (state) => state.conversation;
const getUsers = (state) => state.user;
const getAvatars = (state) => state.avatar;
const getFeatures = (state) => state.features;

export const getSpaceDetails = createSelector(
  [getWidget, getConversation, getUsers, getAvatars],
  // eslint-disable-next-line max-params,complexity
  (widget, conversation, users, avatars) => {
    const spaceDetails = widget.get(`spaceDetails`);
    if (conversation.get(`id`) && users.get(`currentUser`)) {
      let title = spaceDetails.get(`title`);
      let avatarId = conversation.get(`id`);
      const currentUserEmail = users.get(`currentUser`).email;
      let toUser;
      // Grab avatar if we're in a direct conversation
      if (spaceDetails.get(`type`) === `direct`) {
        toUser = conversation.get(`participants`)
          .filter((p) => p.get(`emailAddress`) !== currentUserEmail).first();
        if (toUser) {
          title = toUser.get(`displayName`);
          avatarId = toUser.get(`id`);
        }
      }
      const avatar = avatars.getIn([`items`, avatarId]);
      const toPerson = toUser ? toUser.get(`id`) : widget.get(`toPerson`);

      return widget.get(`spaceDetails`).merge({
        avatar,
        title,
        toPerson
      });
    }
    return spaceDetails;
  }
);

export const getActivityTypes = createSelector(
  [getWidget, getFeatures],
  (widget, features) => {
    const spaceType = widget.getIn([`spaceDetails`, `type`]);
    const activityTypes = widget.get(`activityTypes`).toJS();
    const filteredActivityTypes = [];
    activityTypes.forEach((activityType) => {
      let isValid = true;
      // Filter activity Type based on spaceType
      if (spaceType && !activityType.spaceTypes.includes(spaceType)) {
        isValid = false;
      }
      // Filter activity type based on feature requirement
      if (activityType.feature && !activityType.feature.hide && !features.getIn([`items`, activityType.feature.key])) {
        isValid = false;
      }
      // Hide flag on feature means to hide activity if feature is enabled
      if (activityType.feature && activityType.feature.hide && features.getIn([`items`, activityType.feature.key])) {
        isValid = false;
      }
      if (isValid) {
        filteredActivityTypes.push(activityType);
      }
    });
    return filteredActivityTypes;
  }
);

const getCall = createSelector(
  [getConversation, getMedia],
  (conversation, media) => media.getIn([`calls`, conversation.get(`locusUrl`)])
);


export const getSpaceWidgetProps = createSelector(
  [getWidget, getSpark, getMedia, getSpaceDetails, getActivityTypes, getCall],
  (widget, spark, media, spaceDetails, activityTypes, call) => ({ // eslint-disable-line max-params
    activityTypes,
    media,
    sparkInstance: spark.get(`spark`),
    sparkState: spark.get(`status`),
    spaceDetails,
    widgetStatus: widget.get(`status`),
    call
  })
);
