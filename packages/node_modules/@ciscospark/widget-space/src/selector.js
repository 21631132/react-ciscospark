import {createSelector} from 'reselect';

const getWidget = (state) => state.widgetSpace;
const getSpark = (state) => state.spark;
const getMedia = (state) => state.media;
const getConversation = (state) => state.conversation;
const getUsers = (state) => state.user;
const getAvatars = (state) => state.avatar;

export const getSpaceDetails = createSelector(
  [getWidget, getConversation, getUsers, getAvatars],
  (widget, conversation, users, avatars) => {
    const spaceDetails = widget.get(`spaceDetails`);
    if (conversation.get(`id`)) {
      let title = spaceDetails.get(`title`);
      let avatar = conversation.get(`avatar`);
      const currentUserEmail = users.get(`currentUser`).email;

      // Grab avatar if we're in a direct conversation
      if (spaceDetails.get(`type`) === `direct`) {
        const toUser = conversation.get(`participants`)
          .filter((p) => p.get(`emailAddress`) !== currentUserEmail).first();
        title = toUser.get(`displayName`);
        avatar = avatars.getIn([`items`, toUser.get(`id`)]);
      }

      return widget.get(`spaceDetails`).merge({
        avatar,
        title
      });
    }
    return spaceDetails;
  }
);

export const getActivityTypes = createSelector(
  [getWidget],
  (widget) => {
    const spaceType = widget.getIn([`spaceDetails`, `type`]);
    const activityTypes = widget.get(`activityTypes`);
    // Filter activity Type based on spaceType
    if (spaceType) {
      return activityTypes.filter((a) => a && a.get(`spaceTypes`).includes(spaceType));
    }
    return activityTypes;
  }
);

export const getSpaceWidgetProps = createSelector(
  [getWidget, getSpark, getMedia, getSpaceDetails, getActivityTypes],
  (widget, spark, media, spaceDetails, activityTypes) => ({
    activityTypes,
    media,
    sparkInstance: spark.get(`spark`),
    sparkState: spark.get(`status`),
    spaceDetails,
    widgetStatus: widget.get(`status`)
  })
);

