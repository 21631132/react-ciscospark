/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

import {initialState} from './reducer';
import * as actions from './actions';

let store;

describe(`redux-module-indicators actions `, () => {
  beforeEach(() => {
    store = mockStore(initialState);
  });

  it(`has exported actions`, () => {
    expect(actions.addTyping).toBeDefined();
    expect(actions.deleteTyping).toBeDefined();
    expect(actions.setTyping).toBeDefined();
  });

  describe(`#addTyping`, () => {

    it(`can successfully add typing indicator`, () =>
      store.dispatch(actions.addTyping(`userId`))
        .then(() => {
          expect(store.getActions()).toMatchSnapshot();
        })
    );
  });

  describe(`#deleteTyping`, () => {

    it(`can successfully delete typing indicator`, () =>
      store.dispatch(actions.deleteTyping(`userId`))
        .then(() => {
          expect(store.getActions()).toMatchSnapshot();
        })
    );

  });

  describe(`#setTyping`, () => {

    it(`can successfully setTyping with value`, () =>
      store.dispatch(actions.setTyping(`userId`, `someValue`))
        .then(() => {
          expect(store.getActions()).toMatchSnapshot();
        })
    );

    it(`can successfully setTyping without value`, () =>
      store.dispatch(actions.setTyping(`userId`))
        .then(() => {
          expect(store.getActions()).toMatchSnapshot();
        })
    );

  });

});
