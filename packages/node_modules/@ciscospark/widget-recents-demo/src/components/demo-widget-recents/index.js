/* global ciscospark */
import React, {Component} from 'react';
import {instanceOf} from 'prop-types';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {autobind} from 'core-decorators';
import {Tabs, Tab} from 'material-ui/Tabs';
import RaisedButton from 'material-ui/RaisedButton';
import AppBar from 'material-ui/AppBar';
import Toggle from 'material-ui/Toggle';
import {Card, CardActions, CardTitle, CardText} from 'material-ui/Card';
import SyntaxHighlighter from 'react-syntax-highlighter/prism';
import {coy} from 'react-syntax-highlighter/styles/prism';

import TokenInput from '@webex/private-react-component-token-input';

import styles from './styles.css';

const widgetElementId = 'my-ciscospark-widget';

const propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

class DemoWidgetRecents extends Component {
  componentWillMount() {
    const {cookies} = this.props;
    this.setState({
      displayToken: false,
      accessToken: cookies.get('accessToken') || '',
      accessTokenType: cookies.get('accessTokenType') || '',
      running: false
    });
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    const widgetOptions = {
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      }
    };

    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    const widgetEl = document.getElementById(widgetElementId);
    ciscospark.widget(widgetEl).recentsWidget(widgetOptions);
    this.setState({running: true});
  }

  @autobind
  handleAccessTokenChange(accessToken, accessTokenType) {
    return this.setState({accessToken, accessTokenType});
  }

  @autobind
  handleDisplayAccessTokenChange(e, displayToken) {
    return this.setState({displayToken});
  }

  generateExampleCode() {
    const {accessToken, accessTokenType, displayToken} = this.state;
    const displayedAccessToken = displayToken ? accessToken : 'XXXXXXXXXXXXXX';

    let globalToken, inlineToken;
    if (accessTokenType === 'JWT') {
      globalToken = `guestToken: '${displayedAccessToken}'`;
      inlineToken = `data-guest-token="${displayedAccessToken}"`;
    }
    else {
      globalToken = `accessToken: '${displayedAccessToken}'`;
      inlineToken = `data-access-token="${displayedAccessToken}"`;
    }
    const inlineCode = `<div
  data-toggle="ciscospark-recents"
  ${inlineToken}
/>`;

    const globalCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).recentsWidget({
    ${globalToken}
  });
</script>`;
    return {
      globalCode,
      inlineCode
    };
  }

  render() {
    const loadButtonEnabled = this.state.accessToken;
    const {globalCode, inlineCode} = this.generateExampleCode(this.state);
    const componentContainerClassNames = [
      'ciscospark-widget-component-container',
      styles.widgetComponentContainer
    ];
    if (!this.state.running) {
      componentContainerClassNames.push(styles.hidden);
    }
    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <AppBar title="Webex Teams Recents Widget" />
        <div className={classNames(componentContainerClassNames)}>
          <div id={widgetElementId} />
        </div>
        <div className={classNames('ciscospark-demo-wrapper', styles.demoWrapper)}>
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              title="Webex Teams Recents Widget Demo"
            />
            <CardText expandable>
              <p>
              The Webex Teams Recents widget allows developers to easily incorporate Webex Teams Recents list and events into an application.
              </p>
              <p>
              This widget handles coordination between your application and the Webex Teams APIs, and provides components of the Webex Teams recents list experience without having to build all of the front end UI yourself.
              </p>
              <p>
              Our widget is built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/spark-js-sdk">Webex Teams Javascript SDK </a>.
              </p>
            </CardText>
            <CardActions expandable>
              <RaisedButton
                aria-label="Open Widget"
                disabled={!loadButtonEnabled}
                label="Open Embedded Widget"
                onClick={this.handleSubmit}
                primary
              />
            </CardActions>
          </Card>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <Card initiallyExpanded style={{margin: '10px'}}>
            <CardTitle
              actAsExpander
              showExpandableButton
              subtitle="Webex Teams Recents Widget can be implemented multiple ways."
              title="Widget Example Code"
            />
            <CardText expandable>
              <div className={classNames(styles.example)}>
                <Tabs>
                  <Tab label="Inline Mode">
                    <div className={classNames('ciscospark-example-code', styles.exampleCode)}>
                      <SyntaxHighlighter language="jsx" style={coy}>
                        {inlineCode}
                      </SyntaxHighlighter>
                    </div>
                  </Tab>
                  <Tab label="Global Mode">
                    <div className={classNames('ciscospark-example-code', styles.exampleCode)}>
                      <SyntaxHighlighter language="jsx" style={coy}>
                        {globalCode}
                      </SyntaxHighlighter>
                    </div>
                  </Tab>
                </Tabs>
                <div className={classNames('ciscospark-toggle', styles.toggle)}>
                  <div>
                    <Toggle
                      label="Display Access Token"
                      labelPosition="right"
                      onToggle={this.handleDisplayAccessTokenChange}
                    />
                  </div>
                </div>
              </div>
            </CardText>
          </Card>
        </div>
      </div>
    );
  }
}

DemoWidgetRecents.propTypes = propTypes;

DemoWidgetRecents.title = 'Widget Recents';
DemoWidgetRecents.path = '/widget-recents-demo';

export default withCookies(DemoWidgetRecents);
